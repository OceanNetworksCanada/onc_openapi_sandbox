{"components": {"schemas": {"GetDeployment": {"components": {"schemas": {"get": {"type": "array", "items": {"type": "object", "properties": {"depth": {"type": "number", "example": 982}, "heading": {"nullable": "true", "type": "number", "example": 244}, "roll": {"nullable": "true", "type": "number", "example": 244}, "end": {"nullable": "true", "type": "string", "example": "2016-08-01T00:00:00.000Z"}, "hasDeviceData": {"type": "boolean", "example": true}, "lon": {"type": "number", "example": -126.0508}, "deviceCode": {"type": "string", "example": "SBECTD19p6813"}, "pitch": {"nullable": "true", "type": "number", "example": 244}, "deviceCategoryCode": {"type": "string", "example": "CTD"}, "locationCode": {"type": "string", "example": "BACAX"}, "begin": {"type": "string", "example": "2010-07-27T00:00:00.000Z"}, "lat": {"type": "number", "example": 48.31658}}}}}, "securitySchemes": {"api_key": {"in": "query", "name": "token", "type": "apiKey"}}}, "paths": {"deployments": {"get": {"security": [{"api_key": []}], "operationId": "getDeployments", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/get"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return all Deployments at a specific Location Code. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "example": "BACAX"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return all Deployments that have devices belonging to a specific Device Category. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "example": "CTD"}, {"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return all Deployments that have devices with a sensor for a specific Property. Specific Property Codes can be obtained using the properties service, see https://wiki.oceannetworks.ca/display/O2A/properties+Discovery+Service for more information", "example": "Temperature"}, {"schema": {"format": "date-time", "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return all of the Deployments that have a Deployment Beginning on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"format": "date-time", "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return all of the Deployments that have a Deployment Ending before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}], "tags": ["deployments"]}}}}, "GetRawDataByLocation": {"components": {"schemas": {"rd_location_array": {"type": "object", "required": ["outputFormat"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"sizeLimit": {"type": "integer", "example": 20}, "getLatest": {"type": "boolean", "example": false}, "convertHexToDecimal": {"type": "boolean", "example": false}, "method": {"type": "string", "example": ""}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "locationCode": {"type": "string", "example": "NCBC"}, "deviceCategoryCode": {"type": "string", "example": "BPR"}, "outputFormat": {"type": "string", "example": "Array"}, "skipErrors": {"type": "boolean", "example": false}, "token": {"type": "string"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}, "data": {"type": "object", "properties": {"times": {"type": "array", "items": {"type": "string"}}, "readings": {"type": "array", "items": {"type": "string"}}, "lineTypes": {"type": "array", "items": {"type": "string"}}}}, "messages": {"type": "array", "items": {"type": "string"}}, "outputFormat": {"type": "string", "example": "array"}}}, "rd_location_object": {"type": "object", "required": ["outputFormat"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"sizeLimit": {"type": "integer", "example": 20}, "getLatest": {"type": "boolean", "example": false}, "convertHexToDecimal": {"type": "boolean", "example": false}, "method": {"type": "string", "example": ""}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "locationCode": {"type": "string", "example": "NCBC"}, "deviceCategoryCode": {"type": "string", "example": "BPR"}, "outputFormat": {"type": "string", "example": "Array"}, "skipErrors": {"type": "boolean", "example": false}, "token": {"type": "string"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByDevice&token=YOUR_TOKEN_HERE&deviceCode=BARIX001&dateFrom=2017-06-08T00:00:00.000Z&dateTo=2017-06-08T00:00:00.010Z"}, "data": {"type": "array", "items": {"type": "object", "properties": {"lineType": {"type": "string", "example": ""}, "rawData": {"type": "string", "example": ""}, "sampleTime": {"type": "string", "example": ""}}}}, "messages": {"type": "array", "items": {"type": "string"}}, "outputFormat": {"type": "string", "example": "object"}}}, "getRawDataByLocation": {"oneOf": [{"$ref": "#/components/schemas/rd_location_object"}, {"$ref": "#/components/schemas/rd_location_array"}], "discriminator": {"mapping": {"array": "#/components/schemas/rd_location_array", "object": "#/components/schemas/rd_location_object"}, "propertyName": "outputFormat"}}}}, "paths": {"rawdata-location": {"get": {"security": [{"api_key": []}], "operationId": "getRawDataByLocation", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/getRawDataByLocation"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return raw data from a specific Location. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "required": true, "example": "NCBC"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return raw data belonging to a specific Device Category Code. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "required": true, "example": "BPR"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return raw data that has a timestamp on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:00:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return raw data that has a timestamp before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:01:00.000Z"}, {"schema": {"type": "integer"}, "in": "query", "name": "rowLimit", "description": "Limits the number of raw data rows returned for each sensor code. If rowLimit is missing, is an invalid number, or is over 100,000, the maximum value of 100,000 will be used.", "required": false, "example": 80000}, {"schema": {"type": "integer"}, "in": "query", "name": "sizeLimit", "description": "The limit on the size of raw data readings to return, specified in MB. If not specified the size limit is 250 MB.", "required": false, "example": 20}, {"schema": {"type": "boolean"}, "in": "query", "name": "convertHexToDecimal", "description": "Format of raw data readings. By default, binary data will be returned in decimal. When set to false, it will be returned in hexadecimal.", "required": false, "example": false}, {"schema": {"type": "string", "enum": ["Array", "Object"]}, "in": "query", "explode": true, "name": "outputFormat", "description": "Array - Data will be output as three arrays for a given device: a lineTypes array, a readings array, and a times array. Object - Data will be output as a list of objects for a given device. Inside each data object, there are lineType, rawData, and sampleTime lists.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "getLatest", "description": "Specifies whether or not the latest raw data readings should be returned first. This is false by default. When set to true, readings are returned and pagination is done from latest to earliest.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "skipErrors", "description": "In the exceptional case when some portion of the requested data appears damaged, by default this service will return an error (HTTP status code 500, error code 143) with a description of the problem. If the user ever comes across this error, it's possible to obtain the original data without the damaged samples by setting the parameter skipErrors=true . ONC runs automated tests and has dedicated teams that detect and handle these exceptional cases at the earliest opportunity.", "required": false}], "tags": ["rawdata-location"]}}}}, "GetRawDataByDevice": {"components": {"schemas": {"rd_device_array": {"type": "object", "required": ["outputFormat"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"sizeLimit": {"type": "integer", "example": 20}, "getLatest": {"type": "boolean", "example": false}, "convertHexToDecimal": {"type": "boolean", "example": false}, "method": {"type": "string", "example": ""}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "deviceCategoryCode": {"type": "string", "example": "BPR-Folger-59"}, "outputFormat": {"type": "string", "example": "Array"}, "skipErrors": {"type": "boolean", "example": false}, "token": {"type": "string"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByDevice&token=YOUR_TOKEN_HERE&deviceCode=BARIX001&dateFrom=2017-06-08T00:00:00.000Z&dateTo=2017-06-08T00:00:00.010Z"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByDevice&token=YOUR_TOKEN_HERE&deviceCode=BARIX001&dateFrom=2017-06-08T00:00:00.000Z&dateTo=2017-06-08T00:00:00.010Z"}, "data": {"type": "object", "properties": {"times": {"type": "array", "items": {"type": "string"}}, "readings": {"type": "array", "items": {"type": "string"}}, "lineTypes": {"type": "array", "items": {"type": "string"}}}}, "messages": {"type": "array", "items": {"type": "string"}}, "outputFormat": {"type": "string", "example": "array"}}}, "getRawDataByDevice": {"oneOf": [{"$ref": "#/components/schemas/rd_device_object"}, {"$ref": "#/components/schemas/rd_device_array"}], "discriminator": {"mapping": {"array": "#/components/schemas/rd_device_array", "object": "#/components/schemas/rd_device_object"}, "propertyName": "outputFormat"}}, "rd_device_object": {"type": "object", "required": ["outputFormat"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"sizeLimit": {"type": "integer", "example": 20}, "getLatest": {"type": "boolean", "example": false}, "convertHexToDecimal": {"type": "boolean", "example": false}, "method": {"type": "string", "example": ""}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "deviceCategoryCode": {"type": "string", "example": "BPR-Folger-59"}, "outputFormat": {"type": "string", "example": "Array"}, "skipErrors": {"type": "boolean", "example": false}, "token": {"type": "string"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByDevice&dateTo=2014-04-25T00%3A00%3A00.001Z&deviceCode=SBECTD16p6934&rowLimit=5&dateFrom=2014-04-24T23%3A51%3A00.003Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByDevice&token=YOUR_TOKEN_HERE&deviceCode=BARIX001&dateFrom=2017-06-08T00:00:00.000Z&dateTo=2017-06-08T00:00:00.010Z"}, "data": {"type": "array", "items": {"type": "object", "properties": {"lineType": {"type": "string", "example": ""}, "rawData": {"type": "string", "example": ""}, "sampleTime": {"type": "string", "example": ""}}}}, "messages": {"type": "array", "items": {"type": "string"}}, "outputFormat": {"type": "string", "example": "object"}}}}}, "paths": {"rawdata-device": {"get": {"security": [{"api_key": []}], "operationId": "getRawDataByDevice", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/getRawDataByDevice"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": " Return raw data of a specific Device Code. Device Code must be valid and match exactly, including case. Specific Device Codes can be found by simply running the service without this parameter to get a list of all devices.", "required": true, "example": "BPR-Folger-59"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return raw data that has a timestamp on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:00:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return raw data that has a timestamp before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:01:00.000Z"}, {"schema": {"type": "integer"}, "in": "query", "name": "rowLimit", "description": "Limits the number of raw data rows returned for each sensor code. If rowLimit is missing, is an invalid number, or is over 100,000, the maximum value of 100,000 will be used.", "required": false, "example": 80000}, {"schema": {"type": "integer"}, "in": "query", "name": "sizeLimit", "description": "The limit on the size of raw data readings to return, specified in MB. If not specified the size limit is 250 MB.", "required": false, "example": 20}, {"schema": {"type": "boolean"}, "in": "query", "name": "convertHexToDecimal", "description": "Format of raw data readings. By default, binary data will be returned in decimal. When set to false, it will be returned in hexadecimal.", "required": false, "example": false}, {"schema": {"type": "string", "enum": ["Array", "Object"]}, "in": "query", "explode": true, "name": "outputFormat", "description": "Array - Data will be output as three arrays for a given device: a lineTypes array, a readings array, and a times array. Object - Data will be output as a list of objects for a given device. Inside each data object, there are lineType, rawData, and sampleTime lists.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "getLatest", "description": "Specifies whether or not the latest raw data readings should be returned first. This is false by default. When set to true, readings are returned and pagination is done from latest to earliest.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "skipErrors", "description": "In the exceptional case when some portion of the requested data appears damaged, by default this service will return an error (HTTP status code 500, error code 143) with a description of the problem. If the user ever comes across this error, it's possible to obtain the original data without the damaged samples by setting the parameter skipErrors=true . ONC runs automated tests and has dedicated teams that detect and handle these exceptional cases at the earliest opportunity.", "required": false}], "tags": ["rawdata-device"]}}}}, "GetScalarDataLocation": {"components": {"schemas": {"sd_location_object": {"type": "object", "required": ["outputFormat"], "properties": {"data": {"type": "array", "items": {"type": "object", "properties": {"min": {"type": "number", "example": "-0.018115118449031797"}, "max": {"type": "number", "example": "0.016661775226793907"}, "qaqcFlag": {"type": "integer", "example": "7"}, "count": {"type": "integer", "example": "600"}, "value": {"type": "number", "example": "7.484659961238549E-4"}, "sampleTime": {"type": "string", "example": "2019-11-23T23:50:00.000Z"}}}}, "unitOfMeasure": {"type": "string", "example": "C"}, "sensorName": {"type": "string", "example": "P-Sensor Temperature"}, "sensorCode": {"type": "string", "example": "temperature2"}, "outputFormat": {"type": "string", "example": "Object"}, "actualSamples": {"type": "integer", "example": 60}, "sensorCategoryCode": {"type": "string", "example": "temperature2"}}}, "getScalarDataByLocation": {"type": "object", "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"sensorsToInclude": {"type": "string", "example": "original"}, "metadata": {"type": "string", "example": "Minimum"}, "resamplePeriod": {"nullable": "true", "type": "integer", "example": 60}, "method": {"type": "string", "example": ""}, "fillGaps": {"type": "boolean", "example": true}, "sensorCategoryCodes": {"nullable": "true", "type": "array", "items": {"type": "string"}}, "resampleType": {"nullable": "true", "type": "string", "example": "avg"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "qualityControl": {"type": "string", "example": "clean"}, "token": {"type": "string"}, "sensorBase": {"nullable": "true", "type": "string", "example": "temporal"}, "getLatest": {"type": "boolean", "example": false}, "propertyCode": {"nullable": "true", "type": "array", "items": {"type": "string"}}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "locationCode": {"type": "string", "example": "NCBC"}, "deviceCategoryCode": {"type": "string", "example": "BPR"}, "outputFormat": {"type": "string", "example": "Array"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/scalardata?method=getByLocation&dateTo=2015-02-25T00%3A00%3A01.000Z&locationCode=NC27&deviceCategoryCode=CORK&dateFrom=2015-02-25T00%3A00%3A01.189Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string"}, "metadata": {"type": "object", "properties": {"boundingBox": {"type": "object", "properties": {"maxDepth": {"type": "number", "example": 987}, "minDepth": {"type": "number", "example": 981}, "minLon": {"type": "number", "example": -126.050872}, "maxLat": {"type": "number", "example": 48.316839}, "minLat": {"type": "number", "example": 48.316517}, "maxLon": {"type": "number", "example": -126.050123}}}, "depth": {"type": "number", "example": 48.316685}, "locationName": {"type": "string", "example": "ODP 1026"}, "lon": {"type": "number", "example": -126.050355}, "deviceCategoryCode": {"type": "string", "example": ""}, "lat": {"type": "number", "example": 48.316685}}}, "sensorData": {"type": "array", "items": {"oneOf": [{"$ref": "#/components/schemas/sd_location_object"}, {"$ref": "#/components/schemas/sd_location_array"}], "discriminator": {"mapping": {"array": "#/components/schemas/sd_location_array", "object": "#/components/schemas/sd_location_object"}, "propertyName": "outputFormat"}}}, "messages": {"type": "array", "items": {"type": "string"}}, "parameters": {"type": "object", "properties": {"sensorsToInclude": {"type": "string", "example": "original"}, "metadata": {"type": "string", "example": "Minimum"}, "resamplePeriod": {"nullable": "true", "type": "integer", "example": 60}, "method": {"type": "string", "example": ""}, "fillGaps": {"type": "boolean", "example": true}, "sensorCategoryCodes": {"nullable": "true", "type": "array", "items": {"type": "string"}}, "resampleType": {"nullable": "true", "type": "string", "example": "avg"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "qualityControl": {"type": "string", "example": "clean"}, "token": {"type": "string"}, "sensorBase": {"nullable": "true", "type": "string", "example": "temporal"}, "getLatest": {"type": "boolean", "example": false}, "propertyCode": {"nullable": "true", "type": "array", "items": {"type": "string"}}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "locationCode": {"type": "string", "example": "NCBC"}, "deviceCategoryCode": {"type": "string", "example": "BPR"}, "outputFormat": {"type": "string", "example": "Array"}}}}}, "sd_location_array": {"type": "object", "required": ["outputFormat"], "properties": {"data": {"type": "object", "properties": {"min": {"type": "array", "items": {"type": "number"}}, "max": {"type": "array", "items": {"type": "number"}}, "qaqcFlags": {"type": "array", "items": {"type": "integer"}}, "counts": {"type": "array", "items": {"type": "integer"}}, "values": {"type": "array", "items": {"type": "number"}}, "sampleTimes": {"type": "array", "items": {"type": "string"}}}}, "unitOfMeasure": {"type": "string", "example": "C"}, "sensorName": {"type": "string", "example": "P-Sensor Temperature"}, "sensorCode": {"type": "string", "example": "temperature2"}, "outputFormat": {"type": "string", "example": "Array"}, "actualSamples": {"type": "integer", "example": 60}, "sensorCategoryCode": {"type": "string", "example": "temperature2"}}}}}, "paths": {"scalardata-location": {"get": {"security": [{"api_key": []}], "operationId": "getScalarDataByLocation", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/getScalarDataByLocation"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return scalar data from a specific Location. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "required": true, "example": "NCBC"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return scalar data belonging to a specific Device Category Code. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "required": true, "example": "BPR"}, {"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return scalar data from device for a comma separated list of Properties. Specific Property Codes can be obtained using the properties service, see https://wiki.oceannetworks.ca/display/O2A/properties+Discovery+Service for more information", "required": false, "example": "seawatertemperature,totalpressure"}, {"schema": {"type": "string"}, "in": "query", "name": "sensorCategoryCodes", "description": "A comma separated list of sensor code names. If missing, the system will return all search scalar data within the location code, device category pair, and propertyCode (if given).", "required": false}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return scalar data that has a timestamp on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:00:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return scalar data that has a timestamp before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:01:00.000Z"}, {"schema": {"type": "string", "enum": ["Minimum", "Full"]}, "in": "query", "explode": true, "name": "metadata", "description": "The metadata is for the latest deployment overlapping the time range specified by dateFrom and dateTo. Minimum (default) (case insensitive) provides only basic property information. Full (case insensitive) provides all property information.", "required": false}, {"schema": {"type": "integer"}, "in": "query", "name": "rowLimit", "description": "Limits the number of scalar data rows returned for each sensor code. If rowLimit is missing, is an invalid number, or is over 100,000, the maximum value of 100,000 will be used.", "required": false, "example": 80000}, {"schema": {"type": "string", "enum": ["Array", "Object"]}, "in": "query", "explode": true, "name": "outputFormat", "description": "Array - Data will be output as three arrays for a given device: a lineTypes array, a readings array, and a times array. Object - Data will be output as a list of objects for a given device. Inside each data object, there are lineType, scalarData, and sampleTime lists.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "getLatest", "description": " Specifies whether or not the latest scalar data readings should be returned first. getLatest = false: default. getLatest = true: readings are returned and pagination is done from latest to earliest.", "required": false}, {"schema": {"type": "string", "enum": ["raw", "clean"]}, "in": "query", "explode": true, "name": "qualityControl", "description": "The default value when no qualityControl has been provided is: qualityControl = clean. To get resampled data values: qualityControl = clean.", "required": false}, {"schema": {"type": "string", "enum": ["avg", "avgMinMax", "minMax"]}, "in": "query", "explode": true, "name": "resampleType", "description": "The resampleType option requires that a resamplePeriod has been added. If there is a resamplePeriod, but no resampleType, resampleType defaults to avgMinMax. The value of 'none' is not accepted, however that is the effective default when both the resampleType and resamplePeriod parameters are left off / not included.", "required": false}, {"schema": {"type": "integer", "enum": [60, 600, 900, 3600, 86400]}, "in": "query", "explode": true, "name": "resamplePeriod", "description": "To resample clean scalar data the resample period is set in seconds. The resamplePeriod parameter is required for the resampleType parameter.'0' or 'none' are not accepted. To not resample the data, do not include this parameter.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "fillGaps", "description": "if true fills scalar data gaps with NaN. By default data gaps are filled.", "required": false}, {"schema": {"type": "string", "enum": ["original", "externallyDerived"]}, "in": "query", "explode": true, "name": "sensorsToInclude", "description": "The default value when no sensorsToInclude have been provided is: sensorsToInclude=original. The sensorsToInclude=externallyDerived option requires that qualityControl either not be set or be set to qualityControl=clean", "required": false}], "tags": ["scalardata-location"]}}}}, "GetDeviceCategory": {"components": {"schemas": {"get": {"type": "array", "items": {"type": "object", "properties": {"longDescription": {"type": "string", "example": "Ice buoys are used in Arctic and Antarctic regions to track ice movement and collect environmental data. Ice buoys can be geographically located with the Argos system or other satellite navigation receivers (e.g. GPS)."}, "description": {"type": "string", "example": "Ice Buoy"}, "cvTerm": {"type": "object", "properties": {"deviceCategory": {"type": "array", "items": {"type": "object", "properties": {"vocabulary": {"type": "string", "example": "NERC-L05"}, "uri": {"type": "string", "example": "http://vocab.nerc.ac.uk/collection/L05/current/123/"}}}}}}, "hasDeviceData": {"type": "string", "example": "true"}, "deviceCategoryCode": {"type": "string", "example": "ICE_BUOY"}, "deviceCategoryName": {"type": "string", "example": "ICE_BUOY"}}}}}, "securitySchemes": {"api_key": {"in": "query", "name": "token", "type": "apiKey"}}}, "paths": {"deviceCategories": {"get": {"security": [{"api_key": []}], "operationId": "getDeviceCategories", "responses": {"200": {"description": "OK", "links": {"DeviceCategory": {"operationId": "getDeviceCategories", "parameters": {"method": "get", "locationCode": "$response.body#/0/locaionCode"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/get"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return a single Device Category matching a specific Device Category Code", "example": "CTD"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryName", "description": "Return all of the Device Categories where the Device Category Name contains a keyword", "example": "Conductivity"}, {"schema": {"type": "string"}, "in": "query", "name": "description", "description": "Return all of the Device Categories where the Description contains a keyword.", "example": "Temperature"}, {"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return all Device Categories that are represented at a specific Location. Locations can be found through the location discovery service, see https://wiki.oceannetworks.ca/display/O2A/locations+Discovery+Service for more information"}, {"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return all Device Categories associated specific Property. Property codes can be found through the discovery service, see https://wiki.oceannetworks.ca/display/O2A/properties+Discovery+Service for more information"}], "tags": ["deviceCategories"]}}}}, "LocationTreeNode": {"components": {"schemas": {"GetTreeLocation": {"type": "array", "items": {"$ref": "#/components/schemas/LocationTreeNode"}}, "LocationTreeNode": {"type": "object", "properties": {"locationName": {"type": "string", "example": "Coral Cliff"}, "children": {"nullable": "true", "type": "array", "items": {"$ref": "#/components/schemas/LocationTreeNode"}}, "description": {"type": "string", "example": "The Coral Cliffs are located within Barkley Canyon. At this location, boundary layer flow near steep bathymetry, interaction of currents, and deep-sea corals are observed."}, "hasDeviceData": {"type": "string", "example": "false"}, "locationCode": {"type": "string", "example": "BACCC"}, "hasPropertyData": {"type": "string", "example": "true"}}}}}, "paths": {"locations-tree": {"get": {"security": [{"api_key": []}], "operationId": "getLocationsTree", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetTreeLocation"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return a single Location matching a specific location code.Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "required": false}], "tags": ["locations-tree"]}}}}, "GetScalarDataDevice": {"components": {"schemas": {"getScalarDataByDevice": {"type": "object", "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"sensorsToInclude": {"type": "string", "example": "original"}, "metadata": {"type": "string", "example": "Minimum"}, "resamplePeriod": {"nullable": "true", "type": "integer", "example": 60}, "method": {"type": "string", "example": ""}, "fillGaps": {"type": "boolean", "example": true}, "sensorCategoryCodes": {"nullable": "true", "type": "array", "items": {"type": "string"}}, "resampleType": {"nullable": "true", "type": "string", "example": "avg"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "qualityControl": {"type": "string", "example": "clean"}, "token": {"type": "string"}, "getLatest": {"type": "boolean", "example": false}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "outputFormat": {"type": "string", "example": "Array"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/dmas/api/scalardata?method=getByDevice&token=ffffffff-ffff-ffff-ffff-ffffffffffff&deviceCode=SBECTD19p7027&dateFrom=2019-02-16T00:06:26.028Z&dateTo=2019-02-16T02:00:00.010Z&rowLimit=2"}}}, "queryUrl": {"type": "string"}, "metadata": {"type": "object", "properties": {"boundingBox": {"type": "object", "properties": {"maxDepth": {"type": "number", "example": 987}, "minDepth": {"type": "number", "example": 981}, "minLon": {"type": "number", "example": -126.050872}, "maxLat": {"type": "number", "example": 48.316839}, "minLat": {"type": "number", "example": 48.316517}, "maxLon": {"type": "number", "example": -126.050123}}}, "depth": {"type": "number", "example": 48.316685}, "locationName": {"type": "string", "example": "ODP 1026"}, "lon": {"type": "number", "example": -126.050355}, "deviceCategoryCode": {"type": "string", "example": ""}, "lat": {"type": "number", "example": 48.316685}}}, "sensorData": {"type": "array", "items": {"oneOf": [{"$ref": "#/components/schemas/sd_device_object"}, {"$ref": "#/components/schemas/sd_device_array"}], "discriminator": {"mapping": {"array": "#/components/schemas/sd_device_array", "object": "#/components/schemas/sd_device_object"}, "propertyName": "outputFormat"}}}, "messages": {"type": "array", "items": {"type": "string"}}, "parameters": {"type": "object", "properties": {"sensorsToInclude": {"type": "string", "example": "original"}, "metadata": {"type": "string", "example": "Minimum"}, "resamplePeriod": {"nullable": "true", "type": "integer", "example": 60}, "method": {"type": "string", "example": ""}, "fillGaps": {"type": "boolean", "example": true}, "sensorCategoryCodes": {"nullable": "true", "type": "array", "items": {"type": "string"}}, "resampleType": {"nullable": "true", "type": "string", "example": "avg"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "qualityControl": {"type": "string", "example": "clean"}, "token": {"type": "string"}, "getLatest": {"type": "boolean", "example": false}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "outputFormat": {"type": "string", "example": "Array"}}}}}, "sd_device_object": {"type": "object", "required": ["outputFormat"], "properties": {"data": {"type": "array", "items": {"type": "object", "properties": {"min": {"type": "number", "example": "-0.018115118449031797"}, "max": {"type": "number", "example": "0.016661775226793907"}, "qaqcFlag": {"type": "integer", "example": "7"}, "count": {"type": "integer", "example": "600"}, "value": {"type": "number", "example": "7.484659961238549E-4"}, "sampleTime": {"type": "string", "example": "2019-11-23T23:50:00.000Z"}}}}, "unitOfMeasure": {"type": "string", "example": "C"}, "sensorName": {"type": "string", "example": "P-Sensor Temperature"}, "sensorCode": {"type": "string", "example": "temperature2"}, "outputFormat": {"type": "string", "example": "Object"}, "actualSamples": {"type": "integer", "example": 60}, "sensorCategoryCode": {"type": "string", "example": "temperature2"}}}, "sd_device_array": {"type": "object", "required": ["outputFormat"], "properties": {"data": {"type": "object", "properties": {"min": {"type": "array", "items": {"type": "number"}}, "max": {"type": "array", "items": {"type": "number"}}, "qaqcFlags": {"type": "array", "items": {"type": "integer"}}, "counts": {"type": "array", "items": {"type": "integer"}}, "values": {"type": "array", "items": {"type": "number"}}, "sampleTimes": {"type": "array", "items": {"type": "string"}}}}, "unitOfMeasure": {"type": "string", "example": "C"}, "sensorName": {"type": "string", "example": "P-Sensor Temperature"}, "unitOfMeasure2": {"type": "string", "example": "C"}, "sensorCode": {"type": "string", "example": "temperature2"}, "outputFormat": {"type": "string", "example": "Array"}, "actualSamples": {"type": "integer", "example": 60}, "sensorCategoryCode": {"type": "string", "example": "temperature2"}}}}}, "paths": {"scalardata-device": {"get": {"security": [{"api_key": []}], "operationId": "getScalarDataByDevice", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/getScalarDataByDevice"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": " Return raw data of a specific Device Code. Device Code must be valid and match exactly, including case. Specific Device Codes can be found by simply running the service without this parameter to get a list of all devices.", "required": true, "example": "BPR-Folger-59"}, {"schema": {"type": "string"}, "in": "query", "name": "sensorCategoryCodes", "description": "A comma separated list of sensor code names. If missing, the system will return all search scalar data within the location code, device category pair, and propertyCode (if given).", "required": false}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return scalar data that has a timestamp on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:00:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return scalar data that has a timestamp before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:01:00.000Z"}, {"schema": {"type": "integer"}, "in": "query", "name": "rowLimit", "description": "Limits the number of scalar data rows returned for each sensor code. If rowLimit is missing, is an invalid number, or is over 100,000, the maximum value of 100,000 will be used.", "required": false, "example": 80000}, {"schema": {"type": "string", "enum": ["Array", "Object"]}, "in": "query", "explode": true, "name": "outputFormat", "description": "Array - Data will be output as three arrays for a given device: a lineTypes array, a readings array, and a times array. Object - Data will be output as a list of objects for a given device. Inside each data object, there are lineType, scalarData, and sampleTime lists.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "getLatest", "description": "Specifies whether or not the latest scalar data readings should be returned first. getLatest = false: default. getLatest = true: readings are returned and pagination is done from latest to earliest.", "required": false}, {"schema": {"type": "string", "enum": ["raw", "clean"]}, "in": "query", "explode": true, "name": "qualityControl", "description": "The default value when no qualityControl has been provided is: qualityControl = clean. To get resampled data values: qualityControl = clean.", "required": false}, {"schema": {"type": "string", "enum": ["avg", "avgMinMax", "minMax"]}, "in": "query", "explode": true, "name": "resampleType", "description": "The resampleType option requires that a resamplePeriod has been added. If there is a resamplePeriod, but no resampleType, resampleType defaults to avgMinMax. The value of 'none' is not accepted, however that is the effective default when both the resampleType and resamplePeriod parameters are left off / not included.", "required": false}, {"schema": {"type": "integer", "enum": [60, 600, 900, 3600, 86400]}, "in": "query", "explode": true, "name": "resamplePeriod", "description": "To resample clean scalar data the resample period is set in seconds. The resamplePeriod parameter is required for the resampleType parameter.'0' or 'none' are not accepted. To not resample the data, do not include this parameter.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "fillGaps", "description": "if true fills scalar data gaps with NaN. By default data gaps are filled.", "required": false}, {"schema": {"type": "string", "enum": ["original", "externallyDerived"]}, "in": "query", "explode": true, "name": "sensorsToInclude", "description": "The default value when no sensorsToInclude have been provided is: sensorsToInclude=original. The sensorsToInclude=externallyDerived option requires that qualityControl either not be set or be set to qualityControl=clean", "required": false}], "tags": ["scalardata-device"]}}}}, "GetDataProduct": {"components": {"schemas": {"get": {"type": "array", "items": {"type": "object", "properties": {"extension": {"type": "string", "example": "json"}, "dataProductCode": {"type": "string", "example": "TSSD"}, "helpDocument": {"type": "string", "example": "https://wiki.oceannetworks.ca/display/DP/1"}, "hasDeviceData": {"type": "boolean", "example": true}, "dataProductName": {"type": "string", "example": "Time Series Scalar Data"}, "hasPropertyData": {"type": "boolean", "example": false}}}}}, "securitySchemes": {"api_key": {"in": "query", "name": "token", "type": "apiKey"}}}, "paths": {"dataProducts": {"get": {"security": [{"api_key": []}], "operationId": "getDataProducts", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/get"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "dataProductCode", "description": "Return all Data Product Extensions matching a specific Data Product Code.", "example": "AD"}, {"schema": {"type": "string"}, "in": "query", "name": "extension", "description": "Return all Data Products that have a specific File Extension.", "example": "csv"}, {"schema": {"type": "string"}, "in": "query", "name": "dataProductName", "description": "Return all Data Products where the Data Product Name contains a keyword.", "example": "time"}, {"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return all Data Products available for a specific Property. Specific Property Codes can be obtained using the properties service, see https://wiki.oceannetworks.ca/display/O2A/properties+Discovery+Service for more information", "example": "beamposition"}, {"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return all Data Products available for a specific Location. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "example": "BACAX"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return all Data Products available for devices belonging to a specific Device Category. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "example": "CTD"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": "Return all Data Products available for a specific Device. Specific Device Codes can be obtained using the Devices service, see https://wiki.oceannetworks.ca/display/O2A/devices+Discovery+Service for more information", "example": "AandOpt0581"}], "tags": ["dataProducts"]}}}}, "GetTreeLocation": {"components": {"schemas": {"GetTreeLocation": {"type": "array", "items": {"$ref": "#/components/schemas/LocationTreeNode"}}, "LocationTreeNode": {"type": "object", "properties": {"locationName": {"type": "string", "example": "Coral Cliff"}, "children": {"nullable": "true", "type": "array", "items": {"$ref": "#/components/schemas/LocationTreeNode"}}, "description": {"type": "string", "example": "The Coral Cliffs are located within Barkley Canyon. At this location, boundary layer flow near steep bathymetry, interaction of currents, and deep-sea corals are observed."}, "hasDeviceData": {"type": "string", "example": "false"}, "locationCode": {"type": "string", "example": "BACCC"}, "hasPropertyData": {"type": "string", "example": "true"}}}}}, "paths": {"locations-tree": {"get": {"security": [{"api_key": []}], "operationId": "getLocationsTree", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetTreeLocation"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return a single Location matching a specific location code.Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "required": false}], "tags": ["locations-tree"]}}}}, "GetLocation": {"components": {"schemas": {"GetLocation": {"type": "array", "items": {"type": "object", "properties": {"deployments": {"type": "integer", "example": 32}, "locationName": {"type": "string", "example": "Axis"}, "depth": {"type": "number", "example": 984.164314}, "bbox": {"type": "object", "properties": {"maxDepth": {"type": "number", "example": 987}, "minDepth": {"type": "number", "example": 981}, "minLon": {"type": "number", "example": -126.050872}, "maxLat": {"type": "number", "example": 48.316839}, "minLat": {"type": "number", "example": 48.316517}, "maxLon": {"type": "number", "example": -126.050123}}}, "description": {"type": "string", "example": "Depth: 985 m Latitude: 48.3167 Longitude: -126.0501 Type: Stationary platform Description: Canyon axis: benthic processes, biodiversity, sediment dynamics."}, "hasDeviceData": {"type": "string", "example": "true"}, "lon": {"type": "number", "example": -126.050355}, "locationCode": {"type": "string", "example": "BACAX"}, "hasPropertyData": {"type": "string", "example": "false"}, "lat": {"type": "number", "example": 48.316685}, "dataSearchURL": {"type": "string", "example": "http://data.oceannetworks.ca/DataSearch?location=BACAX"}}}}}}, "paths": {"locations": {"get": {"security": [{"api_key": []}], "operationId": "getLocations", "responses": {"200": {"description": "OK", "links": {"DeviceCategory": {"operationId": "getDeviceCategories", "parameters": {"method": "get", "locationCode": "$response.body#/0/locaionCode"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetLocation"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return a single Location matching a specific location code.Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return all Locations that have devices with a specific Device Category Code. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return all Locations that have devices with a sensor with a specific Property Code. Specific Property Codes can be obtained using the properties service, see https://wiki.oceannetworks.ca/display/O2A/properties+Discovery+Service for more information", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "dataProductCode", "description": "Return all of the Locations that support a specific Data Product Code. DataProductCodes can be found through the dataProduct discovery service, see https://wiki.oceannetworks.ca/display/O2A/dataProducts+Discovery+Service for more information", "required": false}, {"schema": {"format": "date-time", "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return all of the Locations that have a Deployment Beginning on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"format": "date-time", "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return all of the Locations that have a Deployment Ending before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "locationName", "description": "Return all of the Locations where the Location Name contains a keyword.", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": "Return all of the Locations where a specific device with that Device Code has been deployed. Devices can be found through the device discovery service, see https://wiki.oceannetworks.ca/display/O2A/devices+Discovery+Service for more information", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "includeChildren", "description": "Return all Devices that are deployed at a specific Location and sub-tree Locations.", "required": false}], "tags": ["locations"]}}}}, "GetDevice": {"components": {"schemas": {"get": {"type": "array", "items": {"type": "object", "properties": {"cvTerm": {"type": "object", "properties": {"device": {"type": "array", "items": {"type": "object", "properties": {"vocabulary": {"type": "string", "example": "SeaVoX Device Catalogue"}, "uri": {"type": "string", "example": "http://vocab.nerc.ac.uk/collection/L22/current/TOOL0888/"}}}}}}, "hasDeviceData": {"type": "boolean", "example": true}, "dataRating": {"type": "array", "items": {"type": "object", "properties": {"dateTo": {"nullable": "true", "type": "string", "example": "2009-06-23T15:37:00.000Z"}, "dateFrom": {"type": "string", "example": "2009-06-22T15:37:00.000Z"}, "samplePeriod": {"type": "number", "example": 1}, "sampleSize": {"type": "integer", "example": 1}}}}, "deviceCode": {"type": "string", "example": "BC_POD1_AD2M"}, "deviceCategoryCode": {"type": "string", "example": "HYDROPHONE"}, "deviceLink": {"type": "string", "example": "https://data.oceannetworks.ca/DeviceListing?DeviceId=11302"}, "deviceId": {"type": "integer", "example": 11302}, "deviceName": {"type": "string", "example": "ortek Aquadopp HR-Profiler 2965"}}}}}, "securitySchemes": {"api_key": {"in": "query", "name": "token", "type": "apiKey"}}}, "paths": {"devices": {"get": {"security": [{"api_key": []}], "operationId": "getDevices", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/get"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": "Return a single Device matching a specific Device Code.", "example": "FSINXIC1622"}, {"schema": {"type": "integer"}, "in": "query", "name": "deviceId", "description": "Return a single Device matching a specific Device ID.", "example": 10301}, {"schema": {"type": "string"}, "in": "query", "name": "deviceName", "description": "Return all of the Devices where the Device Name contains a keyword.", "example": "meter"}, {"schema": {"type": "boolean"}, "in": "query", "name": "includeChildren", "description": "Return all Devices that are deployed at a specific Location and sub-tree Locations. Requires a valid Location Code", "example": "true"}, {"schema": {"type": "string"}, "in": "query", "name": "dataProductCode", "description": "Return all Devices that have the ability to return a specific Data Product Code. DataProductCodes can be found through the dataProduct discovery service, see https://wiki.oceannetworks.ca/display/O2A/dataProducts+Discovery+Service for more information", "example": "jpgfile"}, {"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return all Devices that are deployed at a specific Location. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "example": "BACAX"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return all Devices belonging to a specific Device Category Code. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "example": "CTD"}, {"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return all Devices that have a sensor for a specific Property Code. Specific Property Codes can be obtained using the properties service, see https://wiki.oceannetworks.ca/display/O2A/properties+Discovery+Service for more information", "example": "Temperature"}, {"schema": {"format": "date-time", "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return all of the Devices that have a Deployment Beginning on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"format": "date-time", "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return all of the Devices that have a Deployment Ending before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}], "tags": ["devices"]}}}}, "GetProperty": {"components": {"schemas": {"get": {"type": "array", "items": {"type": "object", "properties": {"uom": {"type": "string", "example": "decibar"}, "propertyCode": {"type": "string", "example": "pressure"}, "propertyName": {"type": "string", "example": "Pressure"}, "description": {"type": "string", "example": "Pressure"}, "cvTerm": {"type": "object", "properties": {"device": {"type": "array", "items": {"type": "object", "properties": {"vocabulary": {"type": "string", "example": "SeaVoX Device Catalogue"}, "uri": {"type": "string", "example": "http://vocab.nerc.ac.uk/collection/L22/current/TOOL0888/"}}}}}}, "hasDeviceData": {"type": "string", "example": "true"}, "hasPropertyData": {"type": "string", "example": "false"}}}}}, "securitySchemes": {"api_key": {"in": "query", "name": "token", "type": "apiKey"}}}, "paths": {"properties": {"get": {"security": [{"api_key": []}], "operationId": "getProperties", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/get"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return a single Property matching a specific Property Code", "example": "beamposition"}, {"schema": {"type": "string"}, "in": "query", "name": "propertyName", "description": "Return all Properties where the Property Name contains a keyword.", "example": "Temp"}, {"schema": {"type": "string"}, "in": "query", "name": "description", "description": "Return all Properties where Description contains a keyword", "example": "water"}, {"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return all Properties available at a specific Location. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "example": "BACAX"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return all Properties that have devices belonging to a specific Device Category. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "example": "CTD"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": "Return all Properties associated with or measured by a specific Device. Specific Device Codes can be obtained using the Devices service, see https://wiki.oceannetworks.ca/display/O2A/devices+Discovery+Service for more information", "example": "AandOpt0581"}], "tags": ["properties"]}}}}, "GetArchiveFileDevice": {"components": {"schemas": {"af_device_all": {"type": "object", "required": ["returnOption"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"getLatest": {"type": "string", "example": "true"}, "dateArchivedTo": {"type": "string", "example": "2019-11-27T00:00:00.000Z"}, "returnOptions": {"type": "string", "example": "all"}, "dataProductCode": {"type": "string", "example": "HSD"}, "dateArchivedFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}, "fileExtension": {"type": "string", "example": "txt"}, "dateTo": {"type": "string", "example": "2019-11-23T05:00:00.000Z"}, "deviceCode": {"type": "string", "example": "BC_POD2_JB"}, "rowLimit": {"type": "string", "example": "100"}, "page": {"type": "string", "example": "1"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/archivefile-location?locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2019-11-23T00%3A00%3A00.000Z&dateTo=2019-11-26T00%3A01%3A00.000Z&fileExtension=txt&rowLimit=2&page=1&token=TOKEN_HERE"}, "returnOption": {"type": "string", "example": "all"}, "files": {"type": "array", "items": {"type": "object", "properties": {"archivedDate": {"type": "string", "example": "2020-07-23T18:38:17.619Z"}, "path": {"type": "string", "example": "02/60/67"}, "filename": {"type": "string", "example": "BPR-Folger-59_20191123T000000.000Z.txt"}, "modifyDate": {"type": "string", "example": "2020-07-23T18:38:18.070Z"}, "dataProductCode": {"type": "string", "example": "LF"}, "fileSize": {"type": "integer", "example": 1230064}, "archiveLocation": {"type": "string", "example": "/archive/qaad0001/venus/QA_MIRROR/QMIRROR0001"}, "dateTo": {"type": "string", "example": "2019-11-24T00:00:00.000Z"}, "uncompressedFileSize": {"type": "integer", "example": 4837328}, "deviceCode": {"type": "string", "example": "BPR-Folger-59"}, "compression": {"type": "string", "example": "gz"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}}}}, "af_device_default": {"type": "object", "required": ["returnOption"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"getLatest": {"type": "string", "example": "true"}, "dateArchivedTo": {"type": "string", "example": "2019-11-27T00:00:00.000Z"}, "returnOptions": {"type": "string"}, "dataProductCode": {"type": "string", "example": "HSD"}, "dateArchivedFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}, "fileExtension": {"type": "string", "example": "txt"}, "dateTo": {"type": "string", "example": "2019-11-23T05:00:00.000Z"}, "deviceCode": {"type": "string", "example": "BC_POD2_JB"}, "rowLimit": {"type": "string", "example": "100"}, "page": {"type": "string", "example": "1"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/archivefile-location?locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2019-11-23T00%3A00%3A00.000Z&dateTo=2019-11-26T00%3A01%3A00.000Z&fileExtension=txt&rowLimit=2&page=1&token=TOKEN_HERE"}, "returnOption": {"type": "string", "example": "default"}, "files": {"type": "array", "items": {"type": "string"}}}}, "getArchiveFileByDevice": {"oneOf": [{"$ref": "#/components/schemas/af_device_default"}, {"$ref": "#/components/schemas/af_device_all"}, {"$ref": "#/components/schemas/af_device_archiveLocation"}], "discriminator": {"mapping": {"all": "#/components/schemas/af_device_all", "default": "#/components/schemas/af_device_default", "archiveLocation": "#/components/schemas/af_device_archiveLocation"}, "propertyName": "returnOption"}}, "af_device_archiveLocation": {"type": "object", "required": ["returnOption"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"getLatest": {"type": "string", "example": "true"}, "dateArchivedTo": {"type": "string", "example": "2019-11-27T00:00:00.000Z"}, "returnOptions": {"type": "string", "example": "all"}, "dataProductCode": {"type": "string", "example": "HSD"}, "dateArchivedFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}, "fileExtension": {"type": "string", "example": "txt"}, "dateTo": {"type": "string", "example": "2019-11-23T05:00:00.000Z"}, "deviceCode": {"type": "string", "example": "BC_POD2_JB"}, "rowLimit": {"type": "string", "example": "100"}, "page": {"type": "string", "example": "1"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/archivefile-location?locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2019-11-23T00%3A00%3A00.000Z&dateTo=2019-11-26T00%3A01%3A00.000Z&fileExtension=txt&rowLimit=2&page=1&token=TOKEN_HERE"}, "returnOption": {"type": "string", "example": "all"}, "files": {"type": "array", "items": {"type": "object", "properties": {"path": {"type": "string", "example": "02/60/67"}, "filename": {"type": "string", "example": "BPR-Folger-59_20191123T000000.000Z.txt"}, "archiveLocation": {"type": "string", "example": "/archive/qaad0001/venus/QA_MIRROR/QMIRROR0001"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}}}}}}, "paths": {"archivefile-device": {"get": {"security": [{"api_key": []}], "operationId": "getArchiveFileByDevice", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/getArchiveFileByDevice"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": "Return a list of files of a specific Device Code. Device Code must be valid and match exactly, including case. Specific Device Codes can be obtained using the Devices service, see https://wiki.oceannetworks.ca/display/O2A/devices+Discovery+Service for more information.", "required": true, "example": "BPR-Folger-59"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return files that have a timestamp on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:00:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return files that have a timestamp before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-26T00:01:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateArchivedFrom", "description": "Return files archived on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateArchivedTo", "description": "Return files archived before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "fileExtension", "description": "Return files of a specific Data Product Code.DataProductCodes can be found through the dataProduct discovery service, see https://wiki.oceannetworks.ca/display/O2A/dataProducts+Discovery+Service for more information.", "required": false, "example": "txt"}, {"schema": {"type": "string"}, "in": "query", "name": "dataProductCode", "description": "Return files of a specific Data Product Code.DataProductCodes can be found through the dataProduct discovery service, see https://wiki.oceannetworks.ca/display/O2A/dataProducts+Discovery+Service for more information.", "required": false}, {"schema": {"type": "string", "enum": ["archiveLocation", "all"]}, "in": "query", "explode": true, "name": "returnOptions", "description": " If there is no value given, list of filenames will be returned. If the value is 'archiveLocation' a list of filenames with their archiveLocation will be returned. Mostly used by www.oceannetworks.ca website. If the value is 'all' , more metadata information will be returned. *All results returned with serviceMetadata object. ", "required": false}, {"schema": {"type": "integer"}, "in": "query", "name": "rowLimit", "description": "Limits the number of files rows returned for each sensor code. If rowLimit is missing, is an invalid number, or is over 100,000, the maximum value of 100,000 will be used.", "required": false, "example": 80000}, {"schema": {"type": "integer"}, "in": "query", "name": "page", "description": "The service will return data starting from a certain page. By default this value is 1. If the data size is greater than rowLimit, results will be split into pages where each page contains at most rowLimit number of data. This parameter is used to generate serviceMetadata.next parameter, which can be used to get the next set of data.", "required": false, "example": 1}, {"schema": {"type": "boolean"}, "in": "query", "name": "getLatest", "description": "Specifies whether or not the latest files should be returned first. This is false by default. When set to true, readings are returned and pagination is done from latest to earliest.", "required": false}], "tags": ["archivefile-device"]}}}}, "GetArchiveFileLocation": {"components": {"schemas": {"af_location_archiveLocation": {"type": "object", "required": ["returnOption"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"getLatest": {"type": "string", "example": "true"}, "dateArchivedTo": {"type": "string", "example": "2019-11-27T00:00:00.000Z"}, "returnOptions": {"type": "string", "example": "all"}, "dataProductCode": {"type": "string", "example": "HSD"}, "dateArchivedFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}, "fileExtension": {"type": "string", "example": "txt"}, "dateTo": {"type": "string", "example": "2019-11-23T05:00:00.000Z"}, "rowLimit": {"type": "string", "example": "100"}, "page": {"type": "string", "example": "1"}, "locationCode": {"type": "string", "example": "BACUS"}, "deviceCategoryCode": {"type": "string", "example": "JB"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/archivefile-location?locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2019-11-23T00%3A00%3A00.000Z&dateTo=2019-11-26T00%3A01%3A00.000Z&fileExtension=txt&rowLimit=2&page=1&token=TOKEN_HERE"}, "returnOption": {"type": "string", "example": "all"}, "files": {"type": "array", "items": {"type": "object", "properties": {"path": {"type": "string", "example": "02/60/67"}, "filename": {"type": "string", "example": "BPR-Folger-59_20191123T000000.000Z.txt"}, "archiveLocation": {"type": "string", "example": "/archive/qaad0001/venus/QA_MIRROR/QMIRROR0001"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}}}}, "getArchiveFileByLocation": {"oneOf": [{"$ref": "#/components/schemas/af_location_default"}, {"$ref": "#/components/schemas/af_location_all"}, {"$ref": "#/components/schemas/af_location_archiveLocation"}], "discriminator": {"mapping": {"all": "#/components/schemas/af_location_all", "default": "#/components/schemas/af_location_default", "archiveLocation": "#/components/schemas/af_location_archiveLocation"}, "propertyName": "returnOption"}}, "af_location_all": {"type": "object", "required": ["returnOption"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"getLatest": {"type": "string", "example": "true"}, "dateArchivedTo": {"type": "string", "example": "2019-11-27T00:00:00.000Z"}, "returnOptions": {"type": "string", "example": "all"}, "dataProductCode": {"type": "string", "example": "HSD"}, "dateArchivedFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}, "fileExtension": {"type": "string", "example": "txt"}, "dateTo": {"type": "string", "example": "2019-11-23T05:00:00.000Z"}, "rowLimit": {"type": "string", "example": "100"}, "page": {"type": "string", "example": "1"}, "locationCode": {"type": "string", "example": "BACUS"}, "deviceCategoryCode": {"type": "string", "example": "JB"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/archivefile-location?locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2019-11-23T00%3A00%3A00.000Z&dateTo=2019-11-26T00%3A01%3A00.000Z&fileExtension=txt&rowLimit=2&page=1&token=TOKEN_HERE"}, "returnOption": {"type": "string", "example": "all"}, "files": {"type": "array", "items": {"type": "object", "properties": {"archivedDate": {"type": "string", "example": "2020-07-23T18:38:17.619Z"}, "path": {"type": "string", "example": "02/60/67"}, "filename": {"type": "string", "example": "BPR-Folger-59_20191123T000000.000Z.txt"}, "modifyDate": {"type": "string", "example": "2020-07-23T18:38:18.070Z"}, "dataProductCode": {"type": "string", "example": "LF"}, "fileSize": {"type": "integer", "example": 1230064}, "archiveLocation": {"type": "string", "example": "/archive/qaad0001/venus/QA_MIRROR/QMIRROR0001"}, "dateTo": {"type": "string", "example": "2019-11-24T00:00:00.000Z"}, "uncompressedFileSize": {"type": "integer", "example": 4837328}, "deviceCode": {"type": "string", "example": "BPR-Folger-59"}, "compression": {"type": "string", "example": "gz"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}}}}, "af_location_default": {"type": "object", "required": ["returnOption"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"getLatest": {"type": "string", "example": "true"}, "dateArchivedTo": {"type": "string", "example": "2019-11-27T00:00:00.000Z"}, "returnOptions": {"type": "string"}, "dataProductCode": {"type": "string", "example": "HSD"}, "dateArchivedFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}, "fileExtension": {"type": "string", "example": "txt"}, "dateTo": {"type": "string", "example": "2019-11-23T05:00:00.000Z"}, "rowLimit": {"type": "string", "example": "100"}, "page": {"type": "string", "example": "1"}, "locationCode": {"type": "string", "example": "BACUS"}, "deviceCategoryCode": {"type": "string", "example": "JB"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/archivefile-location?locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2019-11-23T00%3A00%3A00.000Z&dateTo=2019-11-26T00%3A01%3A00.000Z&fileExtension=txt&rowLimit=2&page=1&token=TOKEN_HERE"}, "returnOption": {"type": "string", "example": "default"}, "files": {"type": "array", "items": {"type": "string"}}}}}}, "paths": {"archivefile-location": {"get": {"security": [{"api_key": []}], "operationId": "getArchiveFileByLocation", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/getArchiveFileByLocation"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return a list of files from a specific Location. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "required": true, "example": "NCBC"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return a list of files of a specific Device Category Code. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "required": true, "example": "BPR"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return files that have a timestamp on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:00:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return files that have a timestamp before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-26T00:01:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateArchivedFrom", "description": "Return files archived on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateArchivedTo", "description": "Return files archived before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "fileExtension", "description": "Return files of a specific Data Product Code.DataProductCodes can be found through the dataProduct discovery service, see https://wiki.oceannetworks.ca/display/O2A/dataProducts+Discovery+Service for more information.", "required": false, "example": "txt"}, {"schema": {"type": "string"}, "in": "query", "name": "dataProductCode", "description": "Return files of a specific Data Product Code.DataProductCodes can be found through the dataProduct discovery service, see https://wiki.oceannetworks.ca/display/O2A/dataProducts+Discovery+Service for more information.", "required": false}, {"schema": {"type": "string", "enum": ["archiveLocation", "all"]}, "in": "query", "explode": true, "name": "returnOptions", "description": " If there is no value given, list of filenames will be returned. If the value is 'archiveLocation' a list of filenames with their archiveLocation will be returned. Mostly used by www.oceannetworks.ca website. If the value is 'all' , more metadata information will be returned. *All results returned with serviceMetadata object. ", "required": false}, {"schema": {"type": "integer"}, "in": "query", "name": "rowLimit", "description": "Limits the number of file rows returned for each sensor code. If rowLimit is missing, is an invalid number, or is over 100,000, the maximum value of 100,000 will be used.", "required": false, "example": 80000}, {"schema": {"type": "integer"}, "in": "query", "name": "page", "description": "The service will return data starting from a certain page. By default this value is 1. If the data size is greater than rowLimit, results will be split into pages where each page contains at most rowLimit number of data. This parameter is used to generate serviceMetadata.next parameter, which can be used to get the next set of data.", "required": false, "example": 1}, {"schema": {"type": "boolean"}, "in": "query", "name": "getLatest", "description": "Specifies whether or not the latest files should be returned first. This is false by default. When set to true, readings are returned and pagination is done from latest to earliest.", "required": false}], "tags": ["archivefile-location"]}}}}}, "securitySchemes": {"api_key": {"in": "query", "name": "token", "description": "add text here", "type": "apiKey"}}}, "servers": [{"url": "https://data.oceannetworks.ca/api"}, {"url": "https://qa.oceannetworks.ca/api"}], "openapi": "3.0.2", "paths": {"/devices": {"components": {"schemas": {"get": {"type": "array", "items": {"type": "object", "properties": {"cvTerm": {"type": "object", "properties": {"device": {"type": "array", "items": {"type": "object", "properties": {"vocabulary": {"type": "string", "example": "SeaVoX Device Catalogue"}, "uri": {"type": "string", "example": "http://vocab.nerc.ac.uk/collection/L22/current/TOOL0888/"}}}}}}, "hasDeviceData": {"type": "boolean", "example": true}, "dataRating": {"type": "array", "items": {"type": "object", "properties": {"dateTo": {"nullable": "true", "type": "string", "example": "2009-06-23T15:37:00.000Z"}, "dateFrom": {"type": "string", "example": "2009-06-22T15:37:00.000Z"}, "samplePeriod": {"type": "number", "example": 1}, "sampleSize": {"type": "integer", "example": 1}}}}, "deviceCode": {"type": "string", "example": "BC_POD1_AD2M"}, "deviceCategoryCode": {"type": "string", "example": "HYDROPHONE"}, "deviceLink": {"type": "string", "example": "https://data.oceannetworks.ca/DeviceListing?DeviceId=11302"}, "deviceId": {"type": "integer", "example": 11302}, "deviceName": {"type": "string", "example": "ortek Aquadopp HR-Profiler 2965"}}}}}, "securitySchemes": {"api_key": {"in": "query", "name": "token", "type": "apiKey"}}}, "paths": {"devices": {"get": {"security": [{"api_key": []}], "operationId": "getDevices", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/get"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": "Return a single Device matching a specific Device Code.", "example": "FSINXIC1622"}, {"schema": {"type": "integer"}, "in": "query", "name": "deviceId", "description": "Return a single Device matching a specific Device ID.", "example": 10301}, {"schema": {"type": "string"}, "in": "query", "name": "deviceName", "description": "Return all of the Devices where the Device Name contains a keyword.", "example": "meter"}, {"schema": {"type": "boolean"}, "in": "query", "name": "includeChildren", "description": "Return all Devices that are deployed at a specific Location and sub-tree Locations. Requires a valid Location Code", "example": "true"}, {"schema": {"type": "string"}, "in": "query", "name": "dataProductCode", "description": "Return all Devices that have the ability to return a specific Data Product Code. DataProductCodes can be found through the dataProduct discovery service, see https://wiki.oceannetworks.ca/display/O2A/dataProducts+Discovery+Service for more information", "example": "jpgfile"}, {"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return all Devices that are deployed at a specific Location. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "example": "BACAX"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return all Devices belonging to a specific Device Category Code. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "example": "CTD"}, {"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return all Devices that have a sensor for a specific Property Code. Specific Property Codes can be obtained using the properties service, see https://wiki.oceannetworks.ca/display/O2A/properties+Discovery+Service for more information", "example": "Temperature"}, {"schema": {"format": "date-time", "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return all of the Devices that have a Deployment Beginning on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"format": "date-time", "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return all of the Devices that have a Deployment Ending before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}], "tags": ["devices"]}}}}, "/locations-tree": {"components": {"schemas": {"GetTreeLocation": {"type": "array", "items": {"$ref": "#/components/schemas/LocationTreeNode"}}, "LocationTreeNode": {"type": "object", "properties": {"locationName": {"type": "string", "example": "Coral Cliff"}, "children": {"nullable": "true", "type": "array", "items": {"$ref": "#/components/schemas/LocationTreeNode"}}, "description": {"type": "string", "example": "The Coral Cliffs are located within Barkley Canyon. At this location, boundary layer flow near steep bathymetry, interaction of currents, and deep-sea corals are observed."}, "hasDeviceData": {"type": "string", "example": "false"}, "locationCode": {"type": "string", "example": "BACCC"}, "hasPropertyData": {"type": "string", "example": "true"}}}}}, "paths": {"locations-tree": {"get": {"security": [{"api_key": []}], "operationId": "getLocationsTree", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetTreeLocation"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return a single Location matching a specific location code.Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "required": false}], "tags": ["locations-tree"]}}}}, "/deployments": {"components": {"schemas": {"get": {"type": "array", "items": {"type": "object", "properties": {"depth": {"type": "number", "example": 982}, "heading": {"nullable": "true", "type": "number", "example": 244}, "roll": {"nullable": "true", "type": "number", "example": 244}, "end": {"nullable": "true", "type": "string", "example": "2016-08-01T00:00:00.000Z"}, "hasDeviceData": {"type": "boolean", "example": true}, "lon": {"type": "number", "example": -126.0508}, "deviceCode": {"type": "string", "example": "SBECTD19p6813"}, "pitch": {"nullable": "true", "type": "number", "example": 244}, "deviceCategoryCode": {"type": "string", "example": "CTD"}, "locationCode": {"type": "string", "example": "BACAX"}, "begin": {"type": "string", "example": "2010-07-27T00:00:00.000Z"}, "lat": {"type": "number", "example": 48.31658}}}}}, "securitySchemes": {"api_key": {"in": "query", "name": "token", "type": "apiKey"}}}, "paths": {"deployments": {"get": {"security": [{"api_key": []}], "operationId": "getDeployments", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/get"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return all Deployments at a specific Location Code. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "example": "BACAX"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return all Deployments that have devices belonging to a specific Device Category. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "example": "CTD"}, {"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return all Deployments that have devices with a sensor for a specific Property. Specific Property Codes can be obtained using the properties service, see https://wiki.oceannetworks.ca/display/O2A/properties+Discovery+Service for more information", "example": "Temperature"}, {"schema": {"format": "date-time", "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return all of the Deployments that have a Deployment Beginning on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"format": "date-time", "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return all of the Deployments that have a Deployment Ending before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}], "tags": ["deployments"]}}}}, "/rawdata-device": {"components": {"schemas": {"rd_device_array": {"type": "object", "required": ["outputFormat"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"sizeLimit": {"type": "integer", "example": 20}, "getLatest": {"type": "boolean", "example": false}, "convertHexToDecimal": {"type": "boolean", "example": false}, "method": {"type": "string", "example": ""}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "deviceCategoryCode": {"type": "string", "example": "BPR-Folger-59"}, "outputFormat": {"type": "string", "example": "Array"}, "skipErrors": {"type": "boolean", "example": false}, "token": {"type": "string"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByDevice&token=YOUR_TOKEN_HERE&deviceCode=BARIX001&dateFrom=2017-06-08T00:00:00.000Z&dateTo=2017-06-08T00:00:00.010Z"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByDevice&token=YOUR_TOKEN_HERE&deviceCode=BARIX001&dateFrom=2017-06-08T00:00:00.000Z&dateTo=2017-06-08T00:00:00.010Z"}, "data": {"type": "object", "properties": {"times": {"type": "array", "items": {"type": "string"}}, "readings": {"type": "array", "items": {"type": "string"}}, "lineTypes": {"type": "array", "items": {"type": "string"}}}}, "messages": {"type": "array", "items": {"type": "string"}}, "outputFormat": {"type": "string", "example": "array"}}}, "getRawDataByDevice": {"oneOf": [{"$ref": "#/components/schemas/rd_device_object"}, {"$ref": "#/components/schemas/rd_device_array"}], "discriminator": {"mapping": {"array": "#/components/schemas/rd_device_array", "object": "#/components/schemas/rd_device_object"}, "propertyName": "outputFormat"}}, "rd_device_object": {"type": "object", "required": ["outputFormat"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"sizeLimit": {"type": "integer", "example": 20}, "getLatest": {"type": "boolean", "example": false}, "convertHexToDecimal": {"type": "boolean", "example": false}, "method": {"type": "string", "example": ""}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "deviceCategoryCode": {"type": "string", "example": "BPR-Folger-59"}, "outputFormat": {"type": "string", "example": "Array"}, "skipErrors": {"type": "boolean", "example": false}, "token": {"type": "string"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByDevice&dateTo=2014-04-25T00%3A00%3A00.001Z&deviceCode=SBECTD16p6934&rowLimit=5&dateFrom=2014-04-24T23%3A51%3A00.003Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByDevice&token=YOUR_TOKEN_HERE&deviceCode=BARIX001&dateFrom=2017-06-08T00:00:00.000Z&dateTo=2017-06-08T00:00:00.010Z"}, "data": {"type": "array", "items": {"type": "object", "properties": {"lineType": {"type": "string", "example": ""}, "rawData": {"type": "string", "example": ""}, "sampleTime": {"type": "string", "example": ""}}}}, "messages": {"type": "array", "items": {"type": "string"}}, "outputFormat": {"type": "string", "example": "object"}}}}}, "paths": {"rawdata-device": {"get": {"security": [{"api_key": []}], "operationId": "getRawDataByDevice", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/getRawDataByDevice"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": " Return raw data of a specific Device Code. Device Code must be valid and match exactly, including case. Specific Device Codes can be found by simply running the service without this parameter to get a list of all devices.", "required": true, "example": "BPR-Folger-59"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return raw data that has a timestamp on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:00:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return raw data that has a timestamp before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:01:00.000Z"}, {"schema": {"type": "integer"}, "in": "query", "name": "rowLimit", "description": "Limits the number of raw data rows returned for each sensor code. If rowLimit is missing, is an invalid number, or is over 100,000, the maximum value of 100,000 will be used.", "required": false, "example": 80000}, {"schema": {"type": "integer"}, "in": "query", "name": "sizeLimit", "description": "The limit on the size of raw data readings to return, specified in MB. If not specified the size limit is 250 MB.", "required": false, "example": 20}, {"schema": {"type": "boolean"}, "in": "query", "name": "convertHexToDecimal", "description": "Format of raw data readings. By default, binary data will be returned in decimal. When set to false, it will be returned in hexadecimal.", "required": false, "example": false}, {"schema": {"type": "string", "enum": ["Array", "Object"]}, "in": "query", "explode": true, "name": "outputFormat", "description": "Array - Data will be output as three arrays for a given device: a lineTypes array, a readings array, and a times array. Object - Data will be output as a list of objects for a given device. Inside each data object, there are lineType, rawData, and sampleTime lists.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "getLatest", "description": "Specifies whether or not the latest raw data readings should be returned first. This is false by default. When set to true, readings are returned and pagination is done from latest to earliest.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "skipErrors", "description": "In the exceptional case when some portion of the requested data appears damaged, by default this service will return an error (HTTP status code 500, error code 143) with a description of the problem. If the user ever comes across this error, it's possible to obtain the original data without the damaged samples by setting the parameter skipErrors=true . ONC runs automated tests and has dedicated teams that detect and handle these exceptional cases at the earliest opportunity.", "required": false}], "tags": ["rawdata-device"]}}}}, "/properties": {"components": {"schemas": {"get": {"type": "array", "items": {"type": "object", "properties": {"uom": {"type": "string", "example": "decibar"}, "propertyCode": {"type": "string", "example": "pressure"}, "propertyName": {"type": "string", "example": "Pressure"}, "description": {"type": "string", "example": "Pressure"}, "cvTerm": {"type": "object", "properties": {"device": {"type": "array", "items": {"type": "object", "properties": {"vocabulary": {"type": "string", "example": "SeaVoX Device Catalogue"}, "uri": {"type": "string", "example": "http://vocab.nerc.ac.uk/collection/L22/current/TOOL0888/"}}}}}}, "hasDeviceData": {"type": "string", "example": "true"}, "hasPropertyData": {"type": "string", "example": "false"}}}}}, "securitySchemes": {"api_key": {"in": "query", "name": "token", "type": "apiKey"}}}, "paths": {"properties": {"get": {"security": [{"api_key": []}], "operationId": "getProperties", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/get"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return a single Property matching a specific Property Code", "example": "beamposition"}, {"schema": {"type": "string"}, "in": "query", "name": "propertyName", "description": "Return all Properties where the Property Name contains a keyword.", "example": "Temp"}, {"schema": {"type": "string"}, "in": "query", "name": "description", "description": "Return all Properties where Description contains a keyword", "example": "water"}, {"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return all Properties available at a specific Location. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "example": "BACAX"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return all Properties that have devices belonging to a specific Device Category. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "example": "CTD"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": "Return all Properties associated with or measured by a specific Device. Specific Device Codes can be obtained using the Devices service, see https://wiki.oceannetworks.ca/display/O2A/devices+Discovery+Service for more information", "example": "AandOpt0581"}], "tags": ["properties"]}}}}, "/scalardata-device": {"components": {"schemas": {"getScalarDataByDevice": {"type": "object", "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"sensorsToInclude": {"type": "string", "example": "original"}, "metadata": {"type": "string", "example": "Minimum"}, "resamplePeriod": {"nullable": "true", "type": "integer", "example": 60}, "method": {"type": "string", "example": ""}, "fillGaps": {"type": "boolean", "example": true}, "sensorCategoryCodes": {"nullable": "true", "type": "array", "items": {"type": "string"}}, "resampleType": {"nullable": "true", "type": "string", "example": "avg"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "qualityControl": {"type": "string", "example": "clean"}, "token": {"type": "string"}, "getLatest": {"type": "boolean", "example": false}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "outputFormat": {"type": "string", "example": "Array"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/dmas/api/scalardata?method=getByDevice&token=ffffffff-ffff-ffff-ffff-ffffffffffff&deviceCode=SBECTD19p7027&dateFrom=2019-02-16T00:06:26.028Z&dateTo=2019-02-16T02:00:00.010Z&rowLimit=2"}}}, "queryUrl": {"type": "string"}, "metadata": {"type": "object", "properties": {"boundingBox": {"type": "object", "properties": {"maxDepth": {"type": "number", "example": 987}, "minDepth": {"type": "number", "example": 981}, "minLon": {"type": "number", "example": -126.050872}, "maxLat": {"type": "number", "example": 48.316839}, "minLat": {"type": "number", "example": 48.316517}, "maxLon": {"type": "number", "example": -126.050123}}}, "depth": {"type": "number", "example": 48.316685}, "locationName": {"type": "string", "example": "ODP 1026"}, "lon": {"type": "number", "example": -126.050355}, "deviceCategoryCode": {"type": "string", "example": ""}, "lat": {"type": "number", "example": 48.316685}}}, "sensorData": {"type": "array", "items": {"oneOf": [{"$ref": "#/components/schemas/sd_device_object"}, {"$ref": "#/components/schemas/sd_device_array"}], "discriminator": {"mapping": {"array": "#/components/schemas/sd_device_array", "object": "#/components/schemas/sd_device_object"}, "propertyName": "outputFormat"}}}, "messages": {"type": "array", "items": {"type": "string"}}, "parameters": {"type": "object", "properties": {"sensorsToInclude": {"type": "string", "example": "original"}, "metadata": {"type": "string", "example": "Minimum"}, "resamplePeriod": {"nullable": "true", "type": "integer", "example": 60}, "method": {"type": "string", "example": ""}, "fillGaps": {"type": "boolean", "example": true}, "sensorCategoryCodes": {"nullable": "true", "type": "array", "items": {"type": "string"}}, "resampleType": {"nullable": "true", "type": "string", "example": "avg"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "qualityControl": {"type": "string", "example": "clean"}, "token": {"type": "string"}, "getLatest": {"type": "boolean", "example": false}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "outputFormat": {"type": "string", "example": "Array"}}}}}, "sd_device_object": {"type": "object", "required": ["outputFormat"], "properties": {"data": {"type": "array", "items": {"type": "object", "properties": {"min": {"type": "number", "example": "-0.018115118449031797"}, "max": {"type": "number", "example": "0.016661775226793907"}, "qaqcFlag": {"type": "integer", "example": "7"}, "count": {"type": "integer", "example": "600"}, "value": {"type": "number", "example": "7.484659961238549E-4"}, "sampleTime": {"type": "string", "example": "2019-11-23T23:50:00.000Z"}}}}, "unitOfMeasure": {"type": "string", "example": "C"}, "sensorName": {"type": "string", "example": "P-Sensor Temperature"}, "sensorCode": {"type": "string", "example": "temperature2"}, "outputFormat": {"type": "string", "example": "Object"}, "actualSamples": {"type": "integer", "example": 60}, "sensorCategoryCode": {"type": "string", "example": "temperature2"}}}, "sd_device_array": {"type": "object", "required": ["outputFormat"], "properties": {"data": {"type": "object", "properties": {"min": {"type": "array", "items": {"type": "number"}}, "max": {"type": "array", "items": {"type": "number"}}, "qaqcFlags": {"type": "array", "items": {"type": "integer"}}, "counts": {"type": "array", "items": {"type": "integer"}}, "values": {"type": "array", "items": {"type": "number"}}, "sampleTimes": {"type": "array", "items": {"type": "string"}}}}, "unitOfMeasure": {"type": "string", "example": "C"}, "sensorName": {"type": "string", "example": "P-Sensor Temperature"}, "unitOfMeasure2": {"type": "string", "example": "C"}, "sensorCode": {"type": "string", "example": "temperature2"}, "outputFormat": {"type": "string", "example": "Array"}, "actualSamples": {"type": "integer", "example": 60}, "sensorCategoryCode": {"type": "string", "example": "temperature2"}}}}}, "paths": {"scalardata-device": {"get": {"security": [{"api_key": []}], "operationId": "getScalarDataByDevice", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/getScalarDataByDevice"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": " Return raw data of a specific Device Code. Device Code must be valid and match exactly, including case. Specific Device Codes can be found by simply running the service without this parameter to get a list of all devices.", "required": true, "example": "BPR-Folger-59"}, {"schema": {"type": "string"}, "in": "query", "name": "sensorCategoryCodes", "description": "A comma separated list of sensor code names. If missing, the system will return all search scalar data within the location code, device category pair, and propertyCode (if given).", "required": false}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return scalar data that has a timestamp on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:00:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return scalar data that has a timestamp before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:01:00.000Z"}, {"schema": {"type": "integer"}, "in": "query", "name": "rowLimit", "description": "Limits the number of scalar data rows returned for each sensor code. If rowLimit is missing, is an invalid number, or is over 100,000, the maximum value of 100,000 will be used.", "required": false, "example": 80000}, {"schema": {"type": "string", "enum": ["Array", "Object"]}, "in": "query", "explode": true, "name": "outputFormat", "description": "Array - Data will be output as three arrays for a given device: a lineTypes array, a readings array, and a times array. Object - Data will be output as a list of objects for a given device. Inside each data object, there are lineType, scalarData, and sampleTime lists.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "getLatest", "description": "Specifies whether or not the latest scalar data readings should be returned first. getLatest = false: default. getLatest = true: readings are returned and pagination is done from latest to earliest.", "required": false}, {"schema": {"type": "string", "enum": ["raw", "clean"]}, "in": "query", "explode": true, "name": "qualityControl", "description": "The default value when no qualityControl has been provided is: qualityControl = clean. To get resampled data values: qualityControl = clean.", "required": false}, {"schema": {"type": "string", "enum": ["avg", "avgMinMax", "minMax"]}, "in": "query", "explode": true, "name": "resampleType", "description": "The resampleType option requires that a resamplePeriod has been added. If there is a resamplePeriod, but no resampleType, resampleType defaults to avgMinMax. The value of 'none' is not accepted, however that is the effective default when both the resampleType and resamplePeriod parameters are left off / not included.", "required": false}, {"schema": {"type": "integer", "enum": [60, 600, 900, 3600, 86400]}, "in": "query", "explode": true, "name": "resamplePeriod", "description": "To resample clean scalar data the resample period is set in seconds. The resamplePeriod parameter is required for the resampleType parameter.'0' or 'none' are not accepted. To not resample the data, do not include this parameter.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "fillGaps", "description": "if true fills scalar data gaps with NaN. By default data gaps are filled.", "required": false}, {"schema": {"type": "string", "enum": ["original", "externallyDerived"]}, "in": "query", "explode": true, "name": "sensorsToInclude", "description": "The default value when no sensorsToInclude have been provided is: sensorsToInclude=original. The sensorsToInclude=externallyDerived option requires that qualityControl either not be set or be set to qualityControl=clean", "required": false}], "tags": ["scalardata-device"]}}}}, "/dataProducts": {"components": {"schemas": {"get": {"type": "array", "items": {"type": "object", "properties": {"extension": {"type": "string", "example": "json"}, "dataProductCode": {"type": "string", "example": "TSSD"}, "helpDocument": {"type": "string", "example": "https://wiki.oceannetworks.ca/display/DP/1"}, "hasDeviceData": {"type": "boolean", "example": true}, "dataProductName": {"type": "string", "example": "Time Series Scalar Data"}, "hasPropertyData": {"type": "boolean", "example": false}}}}}, "securitySchemes": {"api_key": {"in": "query", "name": "token", "type": "apiKey"}}}, "paths": {"dataProducts": {"get": {"security": [{"api_key": []}], "operationId": "getDataProducts", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/get"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "dataProductCode", "description": "Return all Data Product Extensions matching a specific Data Product Code.", "example": "AD"}, {"schema": {"type": "string"}, "in": "query", "name": "extension", "description": "Return all Data Products that have a specific File Extension.", "example": "csv"}, {"schema": {"type": "string"}, "in": "query", "name": "dataProductName", "description": "Return all Data Products where the Data Product Name contains a keyword.", "example": "time"}, {"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return all Data Products available for a specific Property. Specific Property Codes can be obtained using the properties service, see https://wiki.oceannetworks.ca/display/O2A/properties+Discovery+Service for more information", "example": "beamposition"}, {"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return all Data Products available for a specific Location. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "example": "BACAX"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return all Data Products available for devices belonging to a specific Device Category. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "example": "CTD"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": "Return all Data Products available for a specific Device. Specific Device Codes can be obtained using the Devices service, see https://wiki.oceannetworks.ca/display/O2A/devices+Discovery+Service for more information", "example": "AandOpt0581"}], "tags": ["dataProducts"]}}}}, "/locations": {"components": {"schemas": {"GetLocation": {"type": "array", "items": {"type": "object", "properties": {"deployments": {"type": "integer", "example": 32}, "locationName": {"type": "string", "example": "Axis"}, "depth": {"type": "number", "example": 984.164314}, "bbox": {"type": "object", "properties": {"maxDepth": {"type": "number", "example": 987}, "minDepth": {"type": "number", "example": 981}, "minLon": {"type": "number", "example": -126.050872}, "maxLat": {"type": "number", "example": 48.316839}, "minLat": {"type": "number", "example": 48.316517}, "maxLon": {"type": "number", "example": -126.050123}}}, "description": {"type": "string", "example": "Depth: 985 m Latitude: 48.3167 Longitude: -126.0501 Type: Stationary platform Description: Canyon axis: benthic processes, biodiversity, sediment dynamics."}, "hasDeviceData": {"type": "string", "example": "true"}, "lon": {"type": "number", "example": -126.050355}, "locationCode": {"type": "string", "example": "BACAX"}, "hasPropertyData": {"type": "string", "example": "false"}, "lat": {"type": "number", "example": 48.316685}, "dataSearchURL": {"type": "string", "example": "http://data.oceannetworks.ca/DataSearch?location=BACAX"}}}}}}, "paths": {"locations": {"get": {"security": [{"api_key": []}], "operationId": "getLocations", "responses": {"200": {"description": "OK", "links": {"DeviceCategory": {"operationId": "getDeviceCategories", "parameters": {"method": "get", "locationCode": "$response.body#/0/locaionCode"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetLocation"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return a single Location matching a specific location code.Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return all Locations that have devices with a specific Device Category Code. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return all Locations that have devices with a sensor with a specific Property Code. Specific Property Codes can be obtained using the properties service, see https://wiki.oceannetworks.ca/display/O2A/properties+Discovery+Service for more information", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "dataProductCode", "description": "Return all of the Locations that support a specific Data Product Code. DataProductCodes can be found through the dataProduct discovery service, see https://wiki.oceannetworks.ca/display/O2A/dataProducts+Discovery+Service for more information", "required": false}, {"schema": {"format": "date-time", "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return all of the Locations that have a Deployment Beginning on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"format": "date-time", "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return all of the Locations that have a Deployment Ending before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "locationName", "description": "Return all of the Locations where the Location Name contains a keyword.", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": "Return all of the Locations where a specific device with that Device Code has been deployed. Devices can be found through the device discovery service, see https://wiki.oceannetworks.ca/display/O2A/devices+Discovery+Service for more information", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "includeChildren", "description": "Return all Devices that are deployed at a specific Location and sub-tree Locations.", "required": false}], "tags": ["locations"]}}}}, "/rawdata-location": {"components": {"schemas": {"rd_location_array": {"type": "object", "required": ["outputFormat"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"sizeLimit": {"type": "integer", "example": 20}, "getLatest": {"type": "boolean", "example": false}, "convertHexToDecimal": {"type": "boolean", "example": false}, "method": {"type": "string", "example": ""}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "locationCode": {"type": "string", "example": "NCBC"}, "deviceCategoryCode": {"type": "string", "example": "BPR"}, "outputFormat": {"type": "string", "example": "Array"}, "skipErrors": {"type": "boolean", "example": false}, "token": {"type": "string"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}, "data": {"type": "object", "properties": {"times": {"type": "array", "items": {"type": "string"}}, "readings": {"type": "array", "items": {"type": "string"}}, "lineTypes": {"type": "array", "items": {"type": "string"}}}}, "messages": {"type": "array", "items": {"type": "string"}}, "outputFormat": {"type": "string", "example": "array"}}}, "rd_location_object": {"type": "object", "required": ["outputFormat"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"sizeLimit": {"type": "integer", "example": 20}, "getLatest": {"type": "boolean", "example": false}, "convertHexToDecimal": {"type": "boolean", "example": false}, "method": {"type": "string", "example": ""}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "locationCode": {"type": "string", "example": "NCBC"}, "deviceCategoryCode": {"type": "string", "example": "BPR"}, "outputFormat": {"type": "string", "example": "Array"}, "skipErrors": {"type": "boolean", "example": false}, "token": {"type": "string"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByDevice&token=YOUR_TOKEN_HERE&deviceCode=BARIX001&dateFrom=2017-06-08T00:00:00.000Z&dateTo=2017-06-08T00:00:00.010Z"}, "data": {"type": "array", "items": {"type": "object", "properties": {"lineType": {"type": "string", "example": ""}, "rawData": {"type": "string", "example": ""}, "sampleTime": {"type": "string", "example": ""}}}}, "messages": {"type": "array", "items": {"type": "string"}}, "outputFormat": {"type": "string", "example": "object"}}}, "getRawDataByLocation": {"oneOf": [{"$ref": "#/components/schemas/rd_location_object"}, {"$ref": "#/components/schemas/rd_location_array"}], "discriminator": {"mapping": {"array": "#/components/schemas/rd_location_array", "object": "#/components/schemas/rd_location_object"}, "propertyName": "outputFormat"}}}}, "paths": {"rawdata-location": {"get": {"security": [{"api_key": []}], "operationId": "getRawDataByLocation", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/getRawDataByLocation"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return raw data from a specific Location. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "required": true, "example": "NCBC"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return raw data belonging to a specific Device Category Code. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "required": true, "example": "BPR"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return raw data that has a timestamp on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:00:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return raw data that has a timestamp before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:01:00.000Z"}, {"schema": {"type": "integer"}, "in": "query", "name": "rowLimit", "description": "Limits the number of raw data rows returned for each sensor code. If rowLimit is missing, is an invalid number, or is over 100,000, the maximum value of 100,000 will be used.", "required": false, "example": 80000}, {"schema": {"type": "integer"}, "in": "query", "name": "sizeLimit", "description": "The limit on the size of raw data readings to return, specified in MB. If not specified the size limit is 250 MB.", "required": false, "example": 20}, {"schema": {"type": "boolean"}, "in": "query", "name": "convertHexToDecimal", "description": "Format of raw data readings. By default, binary data will be returned in decimal. When set to false, it will be returned in hexadecimal.", "required": false, "example": false}, {"schema": {"type": "string", "enum": ["Array", "Object"]}, "in": "query", "explode": true, "name": "outputFormat", "description": "Array - Data will be output as three arrays for a given device: a lineTypes array, a readings array, and a times array. Object - Data will be output as a list of objects for a given device. Inside each data object, there are lineType, rawData, and sampleTime lists.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "getLatest", "description": "Specifies whether or not the latest raw data readings should be returned first. This is false by default. When set to true, readings are returned and pagination is done from latest to earliest.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "skipErrors", "description": "In the exceptional case when some portion of the requested data appears damaged, by default this service will return an error (HTTP status code 500, error code 143) with a description of the problem. If the user ever comes across this error, it's possible to obtain the original data without the damaged samples by setting the parameter skipErrors=true . ONC runs automated tests and has dedicated teams that detect and handle these exceptional cases at the earliest opportunity.", "required": false}], "tags": ["rawdata-location"]}}}}, "/deviceCategories": {"components": {"schemas": {"get": {"type": "array", "items": {"type": "object", "properties": {"longDescription": {"type": "string", "example": "Ice buoys are used in Arctic and Antarctic regions to track ice movement and collect environmental data. Ice buoys can be geographically located with the Argos system or other satellite navigation receivers (e.g. GPS)."}, "description": {"type": "string", "example": "Ice Buoy"}, "cvTerm": {"type": "object", "properties": {"deviceCategory": {"type": "array", "items": {"type": "object", "properties": {"vocabulary": {"type": "string", "example": "NERC-L05"}, "uri": {"type": "string", "example": "http://vocab.nerc.ac.uk/collection/L05/current/123/"}}}}}}, "hasDeviceData": {"type": "string", "example": "true"}, "deviceCategoryCode": {"type": "string", "example": "ICE_BUOY"}, "deviceCategoryName": {"type": "string", "example": "ICE_BUOY"}}}}}, "securitySchemes": {"api_key": {"in": "query", "name": "token", "type": "apiKey"}}}, "paths": {"deviceCategories": {"get": {"security": [{"api_key": []}], "operationId": "getDeviceCategories", "responses": {"200": {"description": "OK", "links": {"DeviceCategory": {"operationId": "getDeviceCategories", "parameters": {"method": "get", "locationCode": "$response.body#/0/locaionCode"}}}, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/get"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return a single Device Category matching a specific Device Category Code", "example": "CTD"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryName", "description": "Return all of the Device Categories where the Device Category Name contains a keyword", "example": "Conductivity"}, {"schema": {"type": "string"}, "in": "query", "name": "description", "description": "Return all of the Device Categories where the Description contains a keyword.", "example": "Temperature"}, {"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return all Device Categories that are represented at a specific Location. Locations can be found through the location discovery service, see https://wiki.oceannetworks.ca/display/O2A/locations+Discovery+Service for more information"}, {"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return all Device Categories associated specific Property. Property codes can be found through the discovery service, see https://wiki.oceannetworks.ca/display/O2A/properties+Discovery+Service for more information"}], "tags": ["deviceCategories"]}}}}, "/archivefile-location": {"components": {"schemas": {"af_location_archiveLocation": {"type": "object", "required": ["returnOption"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"getLatest": {"type": "string", "example": "true"}, "dateArchivedTo": {"type": "string", "example": "2019-11-27T00:00:00.000Z"}, "returnOptions": {"type": "string", "example": "all"}, "dataProductCode": {"type": "string", "example": "HSD"}, "dateArchivedFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}, "fileExtension": {"type": "string", "example": "txt"}, "dateTo": {"type": "string", "example": "2019-11-23T05:00:00.000Z"}, "rowLimit": {"type": "string", "example": "100"}, "page": {"type": "string", "example": "1"}, "locationCode": {"type": "string", "example": "BACUS"}, "deviceCategoryCode": {"type": "string", "example": "JB"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/archivefile-location?locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2019-11-23T00%3A00%3A00.000Z&dateTo=2019-11-26T00%3A01%3A00.000Z&fileExtension=txt&rowLimit=2&page=1&token=TOKEN_HERE"}, "returnOption": {"type": "string", "example": "all"}, "files": {"type": "array", "items": {"type": "object", "properties": {"path": {"type": "string", "example": "02/60/67"}, "filename": {"type": "string", "example": "BPR-Folger-59_20191123T000000.000Z.txt"}, "archiveLocation": {"type": "string", "example": "/archive/qaad0001/venus/QA_MIRROR/QMIRROR0001"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}}}}, "getArchiveFileByLocation": {"oneOf": [{"$ref": "#/components/schemas/af_location_default"}, {"$ref": "#/components/schemas/af_location_all"}, {"$ref": "#/components/schemas/af_location_archiveLocation"}], "discriminator": {"mapping": {"all": "#/components/schemas/af_location_all", "default": "#/components/schemas/af_location_default", "archiveLocation": "#/components/schemas/af_location_archiveLocation"}, "propertyName": "returnOption"}}, "af_location_all": {"type": "object", "required": ["returnOption"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"getLatest": {"type": "string", "example": "true"}, "dateArchivedTo": {"type": "string", "example": "2019-11-27T00:00:00.000Z"}, "returnOptions": {"type": "string", "example": "all"}, "dataProductCode": {"type": "string", "example": "HSD"}, "dateArchivedFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}, "fileExtension": {"type": "string", "example": "txt"}, "dateTo": {"type": "string", "example": "2019-11-23T05:00:00.000Z"}, "rowLimit": {"type": "string", "example": "100"}, "page": {"type": "string", "example": "1"}, "locationCode": {"type": "string", "example": "BACUS"}, "deviceCategoryCode": {"type": "string", "example": "JB"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/archivefile-location?locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2019-11-23T00%3A00%3A00.000Z&dateTo=2019-11-26T00%3A01%3A00.000Z&fileExtension=txt&rowLimit=2&page=1&token=TOKEN_HERE"}, "returnOption": {"type": "string", "example": "all"}, "files": {"type": "array", "items": {"type": "object", "properties": {"archivedDate": {"type": "string", "example": "2020-07-23T18:38:17.619Z"}, "path": {"type": "string", "example": "02/60/67"}, "filename": {"type": "string", "example": "BPR-Folger-59_20191123T000000.000Z.txt"}, "modifyDate": {"type": "string", "example": "2020-07-23T18:38:18.070Z"}, "dataProductCode": {"type": "string", "example": "LF"}, "fileSize": {"type": "integer", "example": 1230064}, "archiveLocation": {"type": "string", "example": "/archive/qaad0001/venus/QA_MIRROR/QMIRROR0001"}, "dateTo": {"type": "string", "example": "2019-11-24T00:00:00.000Z"}, "uncompressedFileSize": {"type": "integer", "example": 4837328}, "deviceCode": {"type": "string", "example": "BPR-Folger-59"}, "compression": {"type": "string", "example": "gz"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}}}}, "af_location_default": {"type": "object", "required": ["returnOption"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"getLatest": {"type": "string", "example": "true"}, "dateArchivedTo": {"type": "string", "example": "2019-11-27T00:00:00.000Z"}, "returnOptions": {"type": "string"}, "dataProductCode": {"type": "string", "example": "HSD"}, "dateArchivedFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}, "fileExtension": {"type": "string", "example": "txt"}, "dateTo": {"type": "string", "example": "2019-11-23T05:00:00.000Z"}, "rowLimit": {"type": "string", "example": "100"}, "page": {"type": "string", "example": "1"}, "locationCode": {"type": "string", "example": "BACUS"}, "deviceCategoryCode": {"type": "string", "example": "JB"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/archivefile-location?locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2019-11-23T00%3A00%3A00.000Z&dateTo=2019-11-26T00%3A01%3A00.000Z&fileExtension=txt&rowLimit=2&page=1&token=TOKEN_HERE"}, "returnOption": {"type": "string", "example": "default"}, "files": {"type": "array", "items": {"type": "string"}}}}}}, "paths": {"archivefile-location": {"get": {"security": [{"api_key": []}], "operationId": "getArchiveFileByLocation", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/getArchiveFileByLocation"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return a list of files from a specific Location. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "required": true, "example": "NCBC"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return a list of files of a specific Device Category Code. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "required": true, "example": "BPR"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return files that have a timestamp on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:00:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return files that have a timestamp before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-26T00:01:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateArchivedFrom", "description": "Return files archived on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateArchivedTo", "description": "Return files archived before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "fileExtension", "description": "Return files of a specific Data Product Code.DataProductCodes can be found through the dataProduct discovery service, see https://wiki.oceannetworks.ca/display/O2A/dataProducts+Discovery+Service for more information.", "required": false, "example": "txt"}, {"schema": {"type": "string"}, "in": "query", "name": "dataProductCode", "description": "Return files of a specific Data Product Code.DataProductCodes can be found through the dataProduct discovery service, see https://wiki.oceannetworks.ca/display/O2A/dataProducts+Discovery+Service for more information.", "required": false}, {"schema": {"type": "string", "enum": ["archiveLocation", "all"]}, "in": "query", "explode": true, "name": "returnOptions", "description": " If there is no value given, list of filenames will be returned. If the value is 'archiveLocation' a list of filenames with their archiveLocation will be returned. Mostly used by www.oceannetworks.ca website. If the value is 'all' , more metadata information will be returned. *All results returned with serviceMetadata object. ", "required": false}, {"schema": {"type": "integer"}, "in": "query", "name": "rowLimit", "description": "Limits the number of file rows returned for each sensor code. If rowLimit is missing, is an invalid number, or is over 100,000, the maximum value of 100,000 will be used.", "required": false, "example": 80000}, {"schema": {"type": "integer"}, "in": "query", "name": "page", "description": "The service will return data starting from a certain page. By default this value is 1. If the data size is greater than rowLimit, results will be split into pages where each page contains at most rowLimit number of data. This parameter is used to generate serviceMetadata.next parameter, which can be used to get the next set of data.", "required": false, "example": 1}, {"schema": {"type": "boolean"}, "in": "query", "name": "getLatest", "description": "Specifies whether or not the latest files should be returned first. This is false by default. When set to true, readings are returned and pagination is done from latest to earliest.", "required": false}], "tags": ["archivefile-location"]}}}}, "/archivefile-name": {"paths": {"archivefile-name": {"get": {"security": [{"api_key": []}], "operationId": "getArchiveFileByName", "responses": {"200": {"description": "Downloads the file determined by the filename query parameter", "content": {"application/json": {"schema": {"format": "binary", "type": "string"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "filename", "description": "A valid name of a file in DMAS Archiving System.", "required": true, "example": "BPR-Folger-59_20191123T000000.000Z.txt"}], "tags": ["archivefile-name"]}}}}, "/archivefile-device": {"components": {"schemas": {"af_device_all": {"type": "object", "required": ["returnOption"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"getLatest": {"type": "string", "example": "true"}, "dateArchivedTo": {"type": "string", "example": "2019-11-27T00:00:00.000Z"}, "returnOptions": {"type": "string", "example": "all"}, "dataProductCode": {"type": "string", "example": "HSD"}, "dateArchivedFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}, "fileExtension": {"type": "string", "example": "txt"}, "dateTo": {"type": "string", "example": "2019-11-23T05:00:00.000Z"}, "deviceCode": {"type": "string", "example": "BC_POD2_JB"}, "rowLimit": {"type": "string", "example": "100"}, "page": {"type": "string", "example": "1"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/archivefile-location?locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2019-11-23T00%3A00%3A00.000Z&dateTo=2019-11-26T00%3A01%3A00.000Z&fileExtension=txt&rowLimit=2&page=1&token=TOKEN_HERE"}, "returnOption": {"type": "string", "example": "all"}, "files": {"type": "array", "items": {"type": "object", "properties": {"archivedDate": {"type": "string", "example": "2020-07-23T18:38:17.619Z"}, "path": {"type": "string", "example": "02/60/67"}, "filename": {"type": "string", "example": "BPR-Folger-59_20191123T000000.000Z.txt"}, "modifyDate": {"type": "string", "example": "2020-07-23T18:38:18.070Z"}, "dataProductCode": {"type": "string", "example": "LF"}, "fileSize": {"type": "integer", "example": 1230064}, "archiveLocation": {"type": "string", "example": "/archive/qaad0001/venus/QA_MIRROR/QMIRROR0001"}, "dateTo": {"type": "string", "example": "2019-11-24T00:00:00.000Z"}, "uncompressedFileSize": {"type": "integer", "example": 4837328}, "deviceCode": {"type": "string", "example": "BPR-Folger-59"}, "compression": {"type": "string", "example": "gz"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}}}}, "af_device_default": {"type": "object", "required": ["returnOption"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"getLatest": {"type": "string", "example": "true"}, "dateArchivedTo": {"type": "string", "example": "2019-11-27T00:00:00.000Z"}, "returnOptions": {"type": "string"}, "dataProductCode": {"type": "string", "example": "HSD"}, "dateArchivedFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}, "fileExtension": {"type": "string", "example": "txt"}, "dateTo": {"type": "string", "example": "2019-11-23T05:00:00.000Z"}, "deviceCode": {"type": "string", "example": "BC_POD2_JB"}, "rowLimit": {"type": "string", "example": "100"}, "page": {"type": "string", "example": "1"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/archivefile-location?locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2019-11-23T00%3A00%3A00.000Z&dateTo=2019-11-26T00%3A01%3A00.000Z&fileExtension=txt&rowLimit=2&page=1&token=TOKEN_HERE"}, "returnOption": {"type": "string", "example": "default"}, "files": {"type": "array", "items": {"type": "string"}}}}, "getArchiveFileByDevice": {"oneOf": [{"$ref": "#/components/schemas/af_device_default"}, {"$ref": "#/components/schemas/af_device_all"}, {"$ref": "#/components/schemas/af_device_archiveLocation"}], "discriminator": {"mapping": {"all": "#/components/schemas/af_device_all", "default": "#/components/schemas/af_device_default", "archiveLocation": "#/components/schemas/af_device_archiveLocation"}, "propertyName": "returnOption"}}, "af_device_archiveLocation": {"type": "object", "required": ["returnOption"], "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"getLatest": {"type": "string", "example": "true"}, "dateArchivedTo": {"type": "string", "example": "2019-11-27T00:00:00.000Z"}, "returnOptions": {"type": "string", "example": "all"}, "dataProductCode": {"type": "string", "example": "HSD"}, "dateArchivedFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}, "fileExtension": {"type": "string", "example": "txt"}, "dateTo": {"type": "string", "example": "2019-11-23T05:00:00.000Z"}, "deviceCode": {"type": "string", "example": "BC_POD2_JB"}, "rowLimit": {"type": "string", "example": "100"}, "page": {"type": "string", "example": "1"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/rawdata?method=getByLocation&rowLimit=5&locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2017-07-24T17%3A50%3A04.065Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string", "example": "https://data.oceannetworks.ca/api/archivefile-location?locationCode=NCBC&deviceCategoryCode=BPR&dateFrom=2019-11-23T00%3A00%3A00.000Z&dateTo=2019-11-26T00%3A01%3A00.000Z&fileExtension=txt&rowLimit=2&page=1&token=TOKEN_HERE"}, "returnOption": {"type": "string", "example": "all"}, "files": {"type": "array", "items": {"type": "object", "properties": {"path": {"type": "string", "example": "02/60/67"}, "filename": {"type": "string", "example": "BPR-Folger-59_20191123T000000.000Z.txt"}, "archiveLocation": {"type": "string", "example": "/archive/qaad0001/venus/QA_MIRROR/QMIRROR0001"}, "dateFrom": {"type": "string", "example": "2019-11-23T00:00:00.000Z"}}}}}}}}, "paths": {"archivefile-device": {"get": {"security": [{"api_key": []}], "operationId": "getArchiveFileByDevice", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/getArchiveFileByDevice"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "deviceCode", "description": "Return a list of files of a specific Device Code. Device Code must be valid and match exactly, including case. Specific Device Codes can be obtained using the Devices service, see https://wiki.oceannetworks.ca/display/O2A/devices+Discovery+Service for more information.", "required": true, "example": "BPR-Folger-59"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return files that have a timestamp on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:00:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return files that have a timestamp before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-26T00:01:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateArchivedFrom", "description": "Return files archived on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateArchivedTo", "description": "Return files archived before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false}, {"schema": {"type": "string"}, "in": "query", "name": "fileExtension", "description": "Return files of a specific Data Product Code.DataProductCodes can be found through the dataProduct discovery service, see https://wiki.oceannetworks.ca/display/O2A/dataProducts+Discovery+Service for more information.", "required": false, "example": "txt"}, {"schema": {"type": "string"}, "in": "query", "name": "dataProductCode", "description": "Return files of a specific Data Product Code.DataProductCodes can be found through the dataProduct discovery service, see https://wiki.oceannetworks.ca/display/O2A/dataProducts+Discovery+Service for more information.", "required": false}, {"schema": {"type": "string", "enum": ["archiveLocation", "all"]}, "in": "query", "explode": true, "name": "returnOptions", "description": " If there is no value given, list of filenames will be returned. If the value is 'archiveLocation' a list of filenames with their archiveLocation will be returned. Mostly used by www.oceannetworks.ca website. If the value is 'all' , more metadata information will be returned. *All results returned with serviceMetadata object. ", "required": false}, {"schema": {"type": "integer"}, "in": "query", "name": "rowLimit", "description": "Limits the number of files rows returned for each sensor code. If rowLimit is missing, is an invalid number, or is over 100,000, the maximum value of 100,000 will be used.", "required": false, "example": 80000}, {"schema": {"type": "integer"}, "in": "query", "name": "page", "description": "The service will return data starting from a certain page. By default this value is 1. If the data size is greater than rowLimit, results will be split into pages where each page contains at most rowLimit number of data. This parameter is used to generate serviceMetadata.next parameter, which can be used to get the next set of data.", "required": false, "example": 1}, {"schema": {"type": "boolean"}, "in": "query", "name": "getLatest", "description": "Specifies whether or not the latest files should be returned first. This is false by default. When set to true, readings are returned and pagination is done from latest to earliest.", "required": false}], "tags": ["archivefile-device"]}}}}, "/scalardata-location": {"components": {"schemas": {"sd_location_object": {"type": "object", "required": ["outputFormat"], "properties": {"data": {"type": "array", "items": {"type": "object", "properties": {"min": {"type": "number", "example": "-0.018115118449031797"}, "max": {"type": "number", "example": "0.016661775226793907"}, "qaqcFlag": {"type": "integer", "example": "7"}, "count": {"type": "integer", "example": "600"}, "value": {"type": "number", "example": "7.484659961238549E-4"}, "sampleTime": {"type": "string", "example": "2019-11-23T23:50:00.000Z"}}}}, "unitOfMeasure": {"type": "string", "example": "C"}, "sensorName": {"type": "string", "example": "P-Sensor Temperature"}, "sensorCode": {"type": "string", "example": "temperature2"}, "outputFormat": {"type": "string", "example": "Object"}, "actualSamples": {"type": "integer", "example": 60}, "sensorCategoryCode": {"type": "string", "example": "temperature2"}}}, "getScalarDataByLocation": {"type": "object", "properties": {"next": {"nullable": "true", "type": "object", "properties": {"parameters": {"type": "object", "properties": {"sensorsToInclude": {"type": "string", "example": "original"}, "metadata": {"type": "string", "example": "Minimum"}, "resamplePeriod": {"nullable": "true", "type": "integer", "example": 60}, "method": {"type": "string", "example": ""}, "fillGaps": {"type": "boolean", "example": true}, "sensorCategoryCodes": {"nullable": "true", "type": "array", "items": {"type": "string"}}, "resampleType": {"nullable": "true", "type": "string", "example": "avg"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "qualityControl": {"type": "string", "example": "clean"}, "token": {"type": "string"}, "sensorBase": {"nullable": "true", "type": "string", "example": "temporal"}, "getLatest": {"type": "boolean", "example": false}, "propertyCode": {"nullable": "true", "type": "array", "items": {"type": "string"}}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "locationCode": {"type": "string", "example": "NCBC"}, "deviceCategoryCode": {"type": "string", "example": "BPR"}, "outputFormat": {"type": "string", "example": "Array"}}}, "url": {"type": "string", "example": "https://data.oceannetworks.ca/api/scalardata?method=getByLocation&dateTo=2015-02-25T00%3A00%3A01.000Z&locationCode=NC27&deviceCategoryCode=CORK&dateFrom=2015-02-25T00%3A00%3A01.189Z&token=YOUR_TOKEN_HERE"}}}, "queryUrl": {"type": "string"}, "metadata": {"type": "object", "properties": {"boundingBox": {"type": "object", "properties": {"maxDepth": {"type": "number", "example": 987}, "minDepth": {"type": "number", "example": 981}, "minLon": {"type": "number", "example": -126.050872}, "maxLat": {"type": "number", "example": 48.316839}, "minLat": {"type": "number", "example": 48.316517}, "maxLon": {"type": "number", "example": -126.050123}}}, "depth": {"type": "number", "example": 48.316685}, "locationName": {"type": "string", "example": "ODP 1026"}, "lon": {"type": "number", "example": -126.050355}, "deviceCategoryCode": {"type": "string", "example": ""}, "lat": {"type": "number", "example": 48.316685}}}, "sensorData": {"type": "array", "items": {"oneOf": [{"$ref": "#/components/schemas/sd_location_object"}, {"$ref": "#/components/schemas/sd_location_array"}], "discriminator": {"mapping": {"array": "#/components/schemas/sd_location_array", "object": "#/components/schemas/sd_location_object"}, "propertyName": "outputFormat"}}}, "messages": {"type": "array", "items": {"type": "string"}}, "parameters": {"type": "object", "properties": {"sensorsToInclude": {"type": "string", "example": "original"}, "metadata": {"type": "string", "example": "Minimum"}, "resamplePeriod": {"nullable": "true", "type": "integer", "example": 60}, "method": {"type": "string", "example": ""}, "fillGaps": {"type": "boolean", "example": true}, "sensorCategoryCodes": {"nullable": "true", "type": "array", "items": {"type": "string"}}, "resampleType": {"nullable": "true", "type": "string", "example": "avg"}, "rowLimit": {"type": "integer", "example": 100000}, "dateFrom": {"nullable": "true", "type": "string", "example": "2019-11-23T00:00:00.000Z"}, "qualityControl": {"type": "string", "example": "clean"}, "token": {"type": "string"}, "sensorBase": {"nullable": "true", "type": "string", "example": "temporal"}, "getLatest": {"type": "boolean", "example": false}, "propertyCode": {"nullable": "true", "type": "array", "items": {"type": "string"}}, "dateTo": {"nullable": "true", "type": "string", "example": "2019-11-23T00:01:00.000Z"}, "locationCode": {"type": "string", "example": "NCBC"}, "deviceCategoryCode": {"type": "string", "example": "BPR"}, "outputFormat": {"type": "string", "example": "Array"}}}}}, "sd_location_array": {"type": "object", "required": ["outputFormat"], "properties": {"data": {"type": "object", "properties": {"min": {"type": "array", "items": {"type": "number"}}, "max": {"type": "array", "items": {"type": "number"}}, "qaqcFlags": {"type": "array", "items": {"type": "integer"}}, "counts": {"type": "array", "items": {"type": "integer"}}, "values": {"type": "array", "items": {"type": "number"}}, "sampleTimes": {"type": "array", "items": {"type": "string"}}}}, "unitOfMeasure": {"type": "string", "example": "C"}, "sensorName": {"type": "string", "example": "P-Sensor Temperature"}, "sensorCode": {"type": "string", "example": "temperature2"}, "outputFormat": {"type": "string", "example": "Array"}, "actualSamples": {"type": "integer", "example": 60}, "sensorCategoryCode": {"type": "string", "example": "temperature2"}}}}}, "paths": {"scalardata-location": {"get": {"security": [{"api_key": []}], "operationId": "getScalarDataByLocation", "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/getScalarDataByLocation"}}}}, "400": {"description": "Bad Request"}}, "parameters": [{"schema": {"type": "string"}, "in": "query", "name": "locationCode", "description": "Return scalar data from a specific Location. Location Code must be valid and match exactly, including case. Specific Location Codes can be found by simply running the service without this parameter to get a list of all locations.", "required": true, "example": "NCBC"}, {"schema": {"type": "string"}, "in": "query", "name": "deviceCategoryCode", "description": "Return scalar data belonging to a specific Device Category Code. DeviceCategoryCodes can be found through the deviceCategory discovery service, see https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service for more information", "required": true, "example": "BPR"}, {"schema": {"type": "string"}, "in": "query", "name": "propertyCode", "description": "Return scalar data from device for a comma separated list of Properties. Specific Property Codes can be obtained using the properties service, see https://wiki.oceannetworks.ca/display/O2A/properties+Discovery+Service for more information", "required": false, "example": "seawatertemperature,totalpressure"}, {"schema": {"type": "string"}, "in": "query", "name": "sensorCategoryCodes", "description": "A comma separated list of sensor code names. If missing, the system will return all search scalar data within the location code, device category pair, and propertyCode (if given).", "required": false}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateFrom", "description": "Return scalar data that has a timestamp on or after a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:00:00.000Z"}, {"schema": {"pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$", "type": "string"}, "in": "query", "name": "dateTo", "description": "Return scalar data that has a timestamp before a specific date/time. Dates are formatted yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "required": false, "example": "2019-11-23T00:01:00.000Z"}, {"schema": {"type": "string", "enum": ["Minimum", "Full"]}, "in": "query", "explode": true, "name": "metadata", "description": "The metadata is for the latest deployment overlapping the time range specified by dateFrom and dateTo. Minimum (default) (case insensitive) provides only basic property information. Full (case insensitive) provides all property information.", "required": false}, {"schema": {"type": "integer"}, "in": "query", "name": "rowLimit", "description": "Limits the number of scalar data rows returned for each sensor code. If rowLimit is missing, is an invalid number, or is over 100,000, the maximum value of 100,000 will be used.", "required": false, "example": 80000}, {"schema": {"type": "string", "enum": ["Array", "Object"]}, "in": "query", "explode": true, "name": "outputFormat", "description": "Array - Data will be output as three arrays for a given device: a lineTypes array, a readings array, and a times array. Object - Data will be output as a list of objects for a given device. Inside each data object, there are lineType, scalarData, and sampleTime lists.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "getLatest", "description": " Specifies whether or not the latest scalar data readings should be returned first. getLatest = false: default. getLatest = true: readings are returned and pagination is done from latest to earliest.", "required": false}, {"schema": {"type": "string", "enum": ["raw", "clean"]}, "in": "query", "explode": true, "name": "qualityControl", "description": "The default value when no qualityControl has been provided is: qualityControl = clean. To get resampled data values: qualityControl = clean.", "required": false}, {"schema": {"type": "string", "enum": ["avg", "avgMinMax", "minMax"]}, "in": "query", "explode": true, "name": "resampleType", "description": "The resampleType option requires that a resamplePeriod has been added. If there is a resamplePeriod, but no resampleType, resampleType defaults to avgMinMax. The value of 'none' is not accepted, however that is the effective default when both the resampleType and resamplePeriod parameters are left off / not included.", "required": false}, {"schema": {"type": "integer", "enum": [60, 600, 900, 3600, 86400]}, "in": "query", "explode": true, "name": "resamplePeriod", "description": "To resample clean scalar data the resample period is set in seconds. The resamplePeriod parameter is required for the resampleType parameter.'0' or 'none' are not accepted. To not resample the data, do not include this parameter.", "required": false}, {"schema": {"type": "boolean"}, "in": "query", "name": "fillGaps", "description": "if true fills scalar data gaps with NaN. By default data gaps are filled.", "required": false}, {"schema": {"type": "string", "enum": ["original", "externallyDerived"]}, "in": "query", "explode": true, "name": "sensorsToInclude", "description": "The default value when no sensorsToInclude have been provided is: sensorsToInclude=original. The sensorsToInclude=externallyDerived option requires that qualityControl either not be set or be set to qualityControl=clean", "required": false}], "tags": ["scalardata-location"]}}}}}, "externalDocs": {"description": "Find out more about Oceans 3.0", "url": "https://data.oceannetworks.ca/home"}, "info": {"license": {"name": "Some License", "url": "http://www.apache.org/licenses/LICENSE-2.0.html"}, "contact": {"email": "someEmail@uvic.ca"}, "description": "The Oceans 3.0 API provides a collection of web services for programmatically unlocking access to the vast ONC data archive, whether it is scalar data, complex data or video and imagery. Use Discovery Services to find the data and Delivery Services to retrieve data.", "title": "Oceans 3.0 Public API", "version": "1.0.11"}, "tags": [{"name": "locations", "description": "The API locations discovery web service returns all the locations defined in Oceans 3.0 that meet a set of filter criteria.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/locations+Discovery+Service"}}, {"name": "locations-tree", "description": "The API locations discovery web service returns all the locations defined in Oceans 3.0 that meet a set of filter criteria.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/locations+Discovery+Service#locationsDiscoveryService-getTree"}}, {"name": "deviceCategories", "description": "The API deviceCategories service returns all device categories defined in Oceans 3.0 that meet a filter criteria. A Device Category represents an instrument type classification such as CTD (Conductivity, Temperature & Depth Instrument) or BPR (Bottom Pressure Recorder). Devices from a category can record data for one or more properties (variables). The primary purpose of this service, is to find device categories that have the data you want to access; the service provides the deviceCategoryCode you can use when requesting a data product via the dataProductDelivery web service.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/deviceCategories+Discovery+Service"}}, {"name": "deployments", "description": "The deployments discovery web service returns all deployments defined in Oceans 3.0 which meet the filter criteria, where a deployment is the installation of a device at a location. The deployments service assists in knowing when and where specific types of data are available.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/deployments+Discovery+Service"}}, {"name": "properties", "description": "The API properties service returns all properties defined in Oceans 3.0 that meet a filter criteria. Properties are observable phenomena (aka, variables) and are the common names given to sensor types (i.e., oxygen, pressure, temperature, etc) The primary purpose of this service, is to find the available properties of the data you want to access; the service provides the propertyCode that you can use to request a data product via the dataProductDelivery web service.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/properties+Discovery+Service"}}, {"name": "devices", "description": "The API devices returns all the devices defined in Oceans 3.0 that meet a set of filter criteria. Devices are instruments that have one or more sensors that observe a property or phenomenon with a goal of producing an estimate of the value of a property. Devices are uniquely identified by a device code and can be deployed at multiple locations during their lifespan. The primary purpose of the devices service is to find devices that have the data you are interested in and use the deviceCode when requesting a data product using the dataProductDelivery web service.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/devices+Discovery+Service"}}, {"name": "dataProducts", "description": "The API dataProducts service returns all data products defined in Oceans 3.0 that meet a filter criteria. Data Products are downloadable representations of ONC observational data, provided in formats that can be easily ingested by analytical or visualization software. The primary purpose of this service is to identify which Data Products and Formats (file extensions) are available for the Locations, Devices, Device Categories or Properties of interest. Use the dataProductCode and extension when requesting a data product via the dataProductDelivery web service.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/dataProducts+Discovery+Service"}}, {"name": "scalardata-location", "description": "API scalardata allows users to get scalar data. Returns scalar data in JSON format by given location code and device category code.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/scalardata+service#scalardataservice-getByLocation"}}, {"name": "scalardata-device", "description": "API scalardata allows users to get scalar data. Returns scalar data in JSON format by a given device code.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/scalardata+service#scalardataservice-getByDevice"}}, {"name": "rawdata-device", "description": "API rawdata allows users to get raw data. Gets raw data from an instrument from a date, to a date, or between two given dates.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/rawdata+service#rawdataservice-getByDevice"}}, {"name": "rawdata-location", "description": "API rawdata allows users to get raw data. Retrieve the raw data at a given location for the given device category. A date range is optional\u2013when not specified, data from all time will be returned within (possibly default) row and size limits.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/rawdata+service#rawdataservice-getByLocation"}}, {"name": "archivefile-location", "description": "API archivefiles allows user to search for available files in a station and download the file. Get a list of files available in Oceans 3.0 Archiving System for a given location code and device category code. The list of filenames can be filtered by time range.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/archivefiles#archivefiles-getListByLocation"}}, {"name": "archivefile-device", "description": "API archivefiles allows user to search for available files in a station and download the file. Get a list of files available in Oceans 3.0 Archiving System for a given location code and device category code. The list of filenames can be filtered by time range.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/archivefiles#archivefiles-getListByDevice"}}, {"name": "archivefile-name", "description": "API archivefiles allows user to search for available files in a station and download the file. Get a list of files available in Oceans 3.0 Archiving System for a given location code and device category code. The list of filenames can be filtered by time range.", "externalDocs": {"description": "Find out more", "url": "https://wiki.oceannetworks.ca/display/O2A/archivefiles#archivefiles-getFile"}}]}
